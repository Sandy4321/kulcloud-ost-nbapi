# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mul_nbapi', [dirname(__file__)])
        except ImportError:
            import _mul_nbapi
            return _mul_nbapi
        if fp is not None:
            try:
                _mod = imp.load_module('_mul_nbapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mul_nbapi = swig_import_helper()
    del swig_import_helper
else:
    import _mul_nbapi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


OPENFLOW_OPENFLOW_H = _mul_nbapi.OPENFLOW_OPENFLOW_H
OFP_VERSION = _mul_nbapi.OFP_VERSION
OFP_VERSION_1_1 = _mul_nbapi.OFP_VERSION_1_1
OFP_MAX_TABLE_NAME_LEN = _mul_nbapi.OFP_MAX_TABLE_NAME_LEN
OFP_MAX_PORT_NAME_LEN = _mul_nbapi.OFP_MAX_PORT_NAME_LEN
OFP_TCP_PORT = _mul_nbapi.OFP_TCP_PORT
OFP_SSL_PORT = _mul_nbapi.OFP_SSL_PORT
OFP_ETH_ALEN = _mul_nbapi.OFP_ETH_ALEN
OFPP_MAX = _mul_nbapi.OFPP_MAX
OFPP_IN_PORT = _mul_nbapi.OFPP_IN_PORT
OFPP_TABLE = _mul_nbapi.OFPP_TABLE
OFPP_NORMAL = _mul_nbapi.OFPP_NORMAL
OFPP_FLOOD = _mul_nbapi.OFPP_FLOOD
OFPP_ALL = _mul_nbapi.OFPP_ALL
OFPP_CONTROLLER = _mul_nbapi.OFPP_CONTROLLER
OFPP_LOCAL = _mul_nbapi.OFPP_LOCAL
OFPP_NONE = _mul_nbapi.OFPP_NONE
OFPT_HELLO = _mul_nbapi.OFPT_HELLO
OFPT_ERROR = _mul_nbapi.OFPT_ERROR
OFPT_ECHO_REQUEST = _mul_nbapi.OFPT_ECHO_REQUEST
OFPT_ECHO_REPLY = _mul_nbapi.OFPT_ECHO_REPLY
OFPT_VENDOR = _mul_nbapi.OFPT_VENDOR
OFPT_FEATURES_REQUEST = _mul_nbapi.OFPT_FEATURES_REQUEST
OFPT_FEATURES_REPLY = _mul_nbapi.OFPT_FEATURES_REPLY
OFPT_GET_CONFIG_REQUEST = _mul_nbapi.OFPT_GET_CONFIG_REQUEST
OFPT_GET_CONFIG_REPLY = _mul_nbapi.OFPT_GET_CONFIG_REPLY
OFPT_SET_CONFIG = _mul_nbapi.OFPT_SET_CONFIG
OFPT_PACKET_IN = _mul_nbapi.OFPT_PACKET_IN
OFPT_FLOW_REMOVED = _mul_nbapi.OFPT_FLOW_REMOVED
OFPT_PORT_STATUS = _mul_nbapi.OFPT_PORT_STATUS
OFPT_PACKET_OUT = _mul_nbapi.OFPT_PACKET_OUT
OFPT_FLOW_MOD = _mul_nbapi.OFPT_FLOW_MOD
OFPT_PORT_MOD = _mul_nbapi.OFPT_PORT_MOD
OFPT_STATS_REQUEST = _mul_nbapi.OFPT_STATS_REQUEST
OFPT_STATS_REPLY = _mul_nbapi.OFPT_STATS_REPLY
OFPT_BARRIER_REQUEST = _mul_nbapi.OFPT_BARRIER_REQUEST
OFPT_BARRIER_REPLY = _mul_nbapi.OFPT_BARRIER_REPLY
OFPT_QUEUE_GET_CONFIG_REQUEST = _mul_nbapi.OFPT_QUEUE_GET_CONFIG_REQUEST
OFPT_QUEUE_GET_CONFIG_REPLY = _mul_nbapi.OFPT_QUEUE_GET_CONFIG_REPLY
class ofp_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _mul_nbapi.ofp_header_version_set
    __swig_getmethods__["version"] = _mul_nbapi.ofp_header_version_get
    if _newclass:version = _swig_property(_mul_nbapi.ofp_header_version_get, _mul_nbapi.ofp_header_version_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_header_type_get, _mul_nbapi.ofp_header_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_header_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_header_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_header_length_get, _mul_nbapi.ofp_header_length_set)
    __swig_setmethods__["xid"] = _mul_nbapi.ofp_header_xid_set
    __swig_getmethods__["xid"] = _mul_nbapi.ofp_header_xid_get
    if _newclass:xid = _swig_property(_mul_nbapi.ofp_header_xid_get, _mul_nbapi.ofp_header_xid_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_header
    __del__ = lambda self : None;
ofp_header_swigregister = _mul_nbapi.ofp_header_swigregister
ofp_header_swigregister(ofp_header)

class ofp_hello(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_hello, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_hello, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_hello_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_hello_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_hello_header_get, _mul_nbapi.ofp_hello_header_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_hello()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_hello
    __del__ = lambda self : None;
ofp_hello_swigregister = _mul_nbapi.ofp_hello_swigregister
ofp_hello_swigregister(ofp_hello)

OFP_DEFAULT_MISS_SEND_LEN = _mul_nbapi.OFP_DEFAULT_MISS_SEND_LEN
OFPC_FRAG_NORMAL = _mul_nbapi.OFPC_FRAG_NORMAL
OFPC_FRAG_DROP = _mul_nbapi.OFPC_FRAG_DROP
OFPC_FRAG_REASM = _mul_nbapi.OFPC_FRAG_REASM
OFPC_FRAG_MASK = _mul_nbapi.OFPC_FRAG_MASK
class ofp_switch_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_switch_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_switch_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_switch_config_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_switch_config_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_switch_config_header_get, _mul_nbapi.ofp_switch_config_header_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_switch_config_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_switch_config_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_switch_config_flags_get, _mul_nbapi.ofp_switch_config_flags_set)
    __swig_setmethods__["miss_send_len"] = _mul_nbapi.ofp_switch_config_miss_send_len_set
    __swig_getmethods__["miss_send_len"] = _mul_nbapi.ofp_switch_config_miss_send_len_get
    if _newclass:miss_send_len = _swig_property(_mul_nbapi.ofp_switch_config_miss_send_len_get, _mul_nbapi.ofp_switch_config_miss_send_len_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_switch_config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_switch_config
    __del__ = lambda self : None;
ofp_switch_config_swigregister = _mul_nbapi.ofp_switch_config_swigregister
ofp_switch_config_swigregister(ofp_switch_config)

OFPC_FLOW_STATS = _mul_nbapi.OFPC_FLOW_STATS
OFPC_TABLE_STATS = _mul_nbapi.OFPC_TABLE_STATS
OFPC_PORT_STATS = _mul_nbapi.OFPC_PORT_STATS
OFPC_STP = _mul_nbapi.OFPC_STP
OFPC_RESERVED = _mul_nbapi.OFPC_RESERVED
OFPC_IP_REASM = _mul_nbapi.OFPC_IP_REASM
OFPC_QUEUE_STATS = _mul_nbapi.OFPC_QUEUE_STATS
OFPC_ARP_MATCH_IP = _mul_nbapi.OFPC_ARP_MATCH_IP
OFPPC_PORT_DOWN = _mul_nbapi.OFPPC_PORT_DOWN
OFPPC_NO_STP = _mul_nbapi.OFPPC_NO_STP
OFPPC_NO_RECV = _mul_nbapi.OFPPC_NO_RECV
OFPPC_NO_RECV_STP = _mul_nbapi.OFPPC_NO_RECV_STP
OFPPC_NO_FLOOD = _mul_nbapi.OFPPC_NO_FLOOD
OFPPC_NO_FWD = _mul_nbapi.OFPPC_NO_FWD
OFPPC_NO_PACKET_IN = _mul_nbapi.OFPPC_NO_PACKET_IN
OFPPS_LINK_DOWN = _mul_nbapi.OFPPS_LINK_DOWN
OFPPS_STP_LISTEN = _mul_nbapi.OFPPS_STP_LISTEN
OFPPS_STP_LEARN = _mul_nbapi.OFPPS_STP_LEARN
OFPPS_STP_FORWARD = _mul_nbapi.OFPPS_STP_FORWARD
OFPPS_STP_BLOCK = _mul_nbapi.OFPPS_STP_BLOCK
OFPPS_STP_MASK = _mul_nbapi.OFPPS_STP_MASK
OFPPF_10MB_HD = _mul_nbapi.OFPPF_10MB_HD
OFPPF_10MB_FD = _mul_nbapi.OFPPF_10MB_FD
OFPPF_100MB_HD = _mul_nbapi.OFPPF_100MB_HD
OFPPF_100MB_FD = _mul_nbapi.OFPPF_100MB_FD
OFPPF_1GB_HD = _mul_nbapi.OFPPF_1GB_HD
OFPPF_1GB_FD = _mul_nbapi.OFPPF_1GB_FD
OFPPF_10GB_FD = _mul_nbapi.OFPPF_10GB_FD
OFPPF_COPPER = _mul_nbapi.OFPPF_COPPER
OFPPF_FIBER = _mul_nbapi.OFPPF_FIBER
OFPPF_AUTONEG = _mul_nbapi.OFPPF_AUTONEG
OFPPF_PAUSE = _mul_nbapi.OFPPF_PAUSE
OFPPF_PAUSE_ASYM = _mul_nbapi.OFPPF_PAUSE_ASYM
class ofp_phy_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_phy_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_phy_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp_phy_port_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp_phy_port_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp_phy_port_port_no_get, _mul_nbapi.ofp_phy_port_port_no_set)
    __swig_setmethods__["hw_addr"] = _mul_nbapi.ofp_phy_port_hw_addr_set
    __swig_getmethods__["hw_addr"] = _mul_nbapi.ofp_phy_port_hw_addr_get
    if _newclass:hw_addr = _swig_property(_mul_nbapi.ofp_phy_port_hw_addr_get, _mul_nbapi.ofp_phy_port_hw_addr_set)
    __swig_setmethods__["name"] = _mul_nbapi.ofp_phy_port_name_set
    __swig_getmethods__["name"] = _mul_nbapi.ofp_phy_port_name_get
    if _newclass:name = _swig_property(_mul_nbapi.ofp_phy_port_name_get, _mul_nbapi.ofp_phy_port_name_set)
    __swig_setmethods__["config"] = _mul_nbapi.ofp_phy_port_config_set
    __swig_getmethods__["config"] = _mul_nbapi.ofp_phy_port_config_get
    if _newclass:config = _swig_property(_mul_nbapi.ofp_phy_port_config_get, _mul_nbapi.ofp_phy_port_config_set)
    __swig_setmethods__["state"] = _mul_nbapi.ofp_phy_port_state_set
    __swig_getmethods__["state"] = _mul_nbapi.ofp_phy_port_state_get
    if _newclass:state = _swig_property(_mul_nbapi.ofp_phy_port_state_get, _mul_nbapi.ofp_phy_port_state_set)
    __swig_setmethods__["curr"] = _mul_nbapi.ofp_phy_port_curr_set
    __swig_getmethods__["curr"] = _mul_nbapi.ofp_phy_port_curr_get
    if _newclass:curr = _swig_property(_mul_nbapi.ofp_phy_port_curr_get, _mul_nbapi.ofp_phy_port_curr_set)
    __swig_setmethods__["advertised"] = _mul_nbapi.ofp_phy_port_advertised_set
    __swig_getmethods__["advertised"] = _mul_nbapi.ofp_phy_port_advertised_get
    if _newclass:advertised = _swig_property(_mul_nbapi.ofp_phy_port_advertised_get, _mul_nbapi.ofp_phy_port_advertised_set)
    __swig_setmethods__["supported"] = _mul_nbapi.ofp_phy_port_supported_set
    __swig_getmethods__["supported"] = _mul_nbapi.ofp_phy_port_supported_get
    if _newclass:supported = _swig_property(_mul_nbapi.ofp_phy_port_supported_get, _mul_nbapi.ofp_phy_port_supported_set)
    __swig_setmethods__["peer"] = _mul_nbapi.ofp_phy_port_peer_set
    __swig_getmethods__["peer"] = _mul_nbapi.ofp_phy_port_peer_get
    if _newclass:peer = _swig_property(_mul_nbapi.ofp_phy_port_peer_get, _mul_nbapi.ofp_phy_port_peer_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_phy_port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_phy_port
    __del__ = lambda self : None;
ofp_phy_port_swigregister = _mul_nbapi.ofp_phy_port_swigregister
ofp_phy_port_swigregister(ofp_phy_port)

class ofp_switch_features(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_switch_features, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_switch_features, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_switch_features_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_switch_features_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_switch_features_header_get, _mul_nbapi.ofp_switch_features_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.ofp_switch_features_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.ofp_switch_features_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.ofp_switch_features_datapath_id_get, _mul_nbapi.ofp_switch_features_datapath_id_set)
    __swig_setmethods__["n_buffers"] = _mul_nbapi.ofp_switch_features_n_buffers_set
    __swig_getmethods__["n_buffers"] = _mul_nbapi.ofp_switch_features_n_buffers_get
    if _newclass:n_buffers = _swig_property(_mul_nbapi.ofp_switch_features_n_buffers_get, _mul_nbapi.ofp_switch_features_n_buffers_set)
    __swig_setmethods__["n_tables"] = _mul_nbapi.ofp_switch_features_n_tables_set
    __swig_getmethods__["n_tables"] = _mul_nbapi.ofp_switch_features_n_tables_get
    if _newclass:n_tables = _swig_property(_mul_nbapi.ofp_switch_features_n_tables_get, _mul_nbapi.ofp_switch_features_n_tables_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_switch_features_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_switch_features_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_switch_features_pad_get, _mul_nbapi.ofp_switch_features_pad_set)
    __swig_setmethods__["capabilities"] = _mul_nbapi.ofp_switch_features_capabilities_set
    __swig_getmethods__["capabilities"] = _mul_nbapi.ofp_switch_features_capabilities_get
    if _newclass:capabilities = _swig_property(_mul_nbapi.ofp_switch_features_capabilities_get, _mul_nbapi.ofp_switch_features_capabilities_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp_switch_features_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp_switch_features_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp_switch_features_actions_get, _mul_nbapi.ofp_switch_features_actions_set)
    __swig_setmethods__["ports"] = _mul_nbapi.ofp_switch_features_ports_set
    __swig_getmethods__["ports"] = _mul_nbapi.ofp_switch_features_ports_get
    if _newclass:ports = _swig_property(_mul_nbapi.ofp_switch_features_ports_get, _mul_nbapi.ofp_switch_features_ports_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_switch_features()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_switch_features
    __del__ = lambda self : None;
ofp_switch_features_swigregister = _mul_nbapi.ofp_switch_features_swigregister
ofp_switch_features_swigregister(ofp_switch_features)

OFPPR_ADD = _mul_nbapi.OFPPR_ADD
OFPPR_DELETE = _mul_nbapi.OFPPR_DELETE
OFPPR_MODIFY = _mul_nbapi.OFPPR_MODIFY
class ofp_port_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_status, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_port_status_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_port_status_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_port_status_header_get, _mul_nbapi.ofp_port_status_header_set)
    __swig_setmethods__["reason"] = _mul_nbapi.ofp_port_status_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.ofp_port_status_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.ofp_port_status_reason_get, _mul_nbapi.ofp_port_status_reason_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_port_status_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_port_status_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_port_status_pad_get, _mul_nbapi.ofp_port_status_pad_set)
    __swig_setmethods__["desc"] = _mul_nbapi.ofp_port_status_desc_set
    __swig_getmethods__["desc"] = _mul_nbapi.ofp_port_status_desc_get
    if _newclass:desc = _swig_property(_mul_nbapi.ofp_port_status_desc_get, _mul_nbapi.ofp_port_status_desc_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_status()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_status
    __del__ = lambda self : None;
ofp_port_status_swigregister = _mul_nbapi.ofp_port_status_swigregister
ofp_port_status_swigregister(ofp_port_status)

class ofp_port_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_port_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_port_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_port_mod_header_get, _mul_nbapi.ofp_port_mod_header_set)
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp_port_mod_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp_port_mod_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp_port_mod_port_no_get, _mul_nbapi.ofp_port_mod_port_no_set)
    __swig_setmethods__["hw_addr"] = _mul_nbapi.ofp_port_mod_hw_addr_set
    __swig_getmethods__["hw_addr"] = _mul_nbapi.ofp_port_mod_hw_addr_get
    if _newclass:hw_addr = _swig_property(_mul_nbapi.ofp_port_mod_hw_addr_get, _mul_nbapi.ofp_port_mod_hw_addr_set)
    __swig_setmethods__["config"] = _mul_nbapi.ofp_port_mod_config_set
    __swig_getmethods__["config"] = _mul_nbapi.ofp_port_mod_config_get
    if _newclass:config = _swig_property(_mul_nbapi.ofp_port_mod_config_get, _mul_nbapi.ofp_port_mod_config_set)
    __swig_setmethods__["mask"] = _mul_nbapi.ofp_port_mod_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.ofp_port_mod_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.ofp_port_mod_mask_get, _mul_nbapi.ofp_port_mod_mask_set)
    __swig_setmethods__["advertise"] = _mul_nbapi.ofp_port_mod_advertise_set
    __swig_getmethods__["advertise"] = _mul_nbapi.ofp_port_mod_advertise_get
    if _newclass:advertise = _swig_property(_mul_nbapi.ofp_port_mod_advertise_get, _mul_nbapi.ofp_port_mod_advertise_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_port_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_port_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_port_mod_pad_get, _mul_nbapi.ofp_port_mod_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_mod
    __del__ = lambda self : None;
ofp_port_mod_swigregister = _mul_nbapi.ofp_port_mod_swigregister
ofp_port_mod_swigregister(ofp_port_mod)

OFPR_NO_MATCH = _mul_nbapi.OFPR_NO_MATCH
OFPR_ACTION = _mul_nbapi.OFPR_ACTION
class ofp_packet_in(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_packet_in, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_packet_in, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_packet_in_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_packet_in_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_packet_in_header_get, _mul_nbapi.ofp_packet_in_header_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp_packet_in_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp_packet_in_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp_packet_in_buffer_id_get, _mul_nbapi.ofp_packet_in_buffer_id_set)
    __swig_setmethods__["total_len"] = _mul_nbapi.ofp_packet_in_total_len_set
    __swig_getmethods__["total_len"] = _mul_nbapi.ofp_packet_in_total_len_get
    if _newclass:total_len = _swig_property(_mul_nbapi.ofp_packet_in_total_len_get, _mul_nbapi.ofp_packet_in_total_len_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.ofp_packet_in_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.ofp_packet_in_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.ofp_packet_in_in_port_get, _mul_nbapi.ofp_packet_in_in_port_set)
    __swig_setmethods__["reason"] = _mul_nbapi.ofp_packet_in_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.ofp_packet_in_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.ofp_packet_in_reason_get, _mul_nbapi.ofp_packet_in_reason_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_packet_in_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_packet_in_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_packet_in_pad_get, _mul_nbapi.ofp_packet_in_pad_set)
    __swig_setmethods__["data"] = _mul_nbapi.ofp_packet_in_data_set
    __swig_getmethods__["data"] = _mul_nbapi.ofp_packet_in_data_get
    if _newclass:data = _swig_property(_mul_nbapi.ofp_packet_in_data_get, _mul_nbapi.ofp_packet_in_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_packet_in()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_packet_in
    __del__ = lambda self : None;
ofp_packet_in_swigregister = _mul_nbapi.ofp_packet_in_swigregister
ofp_packet_in_swigregister(ofp_packet_in)

OFPAT_OUTPUT = _mul_nbapi.OFPAT_OUTPUT
OFPAT_SET_VLAN_VID = _mul_nbapi.OFPAT_SET_VLAN_VID
OFPAT_SET_VLAN_PCP = _mul_nbapi.OFPAT_SET_VLAN_PCP
OFPAT_STRIP_VLAN = _mul_nbapi.OFPAT_STRIP_VLAN
OFPAT_SET_DL_SRC = _mul_nbapi.OFPAT_SET_DL_SRC
OFPAT_SET_DL_DST = _mul_nbapi.OFPAT_SET_DL_DST
OFPAT_SET_NW_SRC = _mul_nbapi.OFPAT_SET_NW_SRC
OFPAT_SET_NW_DST = _mul_nbapi.OFPAT_SET_NW_DST
OFPAT_SET_NW_TOS = _mul_nbapi.OFPAT_SET_NW_TOS
OFPAT_SET_TP_SRC = _mul_nbapi.OFPAT_SET_TP_SRC
OFPAT_SET_TP_DST = _mul_nbapi.OFPAT_SET_TP_DST
OFPAT_ENQUEUE = _mul_nbapi.OFPAT_ENQUEUE
OFPAT_KULCLOUD = _mul_nbapi.OFPAT_KULCLOUD
OFPAT_VENDOR = _mul_nbapi.OFPAT_VENDOR
OFPAT_OUTPUT_2 = _mul_nbapi.OFPAT_OUTPUT_2
OFPAT_SET_VLAN_VID_2 = _mul_nbapi.OFPAT_SET_VLAN_VID_2
OFPAT_SET_VLAN_PCP_2 = _mul_nbapi.OFPAT_SET_VLAN_PCP_2
OFPAT_SET_DL_SRC_2 = _mul_nbapi.OFPAT_SET_DL_SRC_2
OFPAT_SET_DL_DST_2 = _mul_nbapi.OFPAT_SET_DL_DST_2
OFPAT_SET_NW_SRC_2 = _mul_nbapi.OFPAT_SET_NW_SRC_2
OFPAT_SET_NW_DST_2 = _mul_nbapi.OFPAT_SET_NW_DST_2
OFPAT_SET_NW_TOS_2 = _mul_nbapi.OFPAT_SET_NW_TOS_2
OFPAT_SET_NW_ECN_2 = _mul_nbapi.OFPAT_SET_NW_ECN_2
OFPAT_SET_TP_SRC_2 = _mul_nbapi.OFPAT_SET_TP_SRC_2
OFPAT_SET_TP_DST_2 = _mul_nbapi.OFPAT_SET_TP_DST_2
OFPAT_COPY_TTL_OUT_2 = _mul_nbapi.OFPAT_COPY_TTL_OUT_2
OFPAT_COPY_TTL_IN_2 = _mul_nbapi.OFPAT_COPY_TTL_IN_2
OFPAT_SET_MPLS_LABEL_2 = _mul_nbapi.OFPAT_SET_MPLS_LABEL_2
OFPAT_SET_MPLS_TC_2 = _mul_nbapi.OFPAT_SET_MPLS_TC_2
OFPAT_SET_MPLS_TTL_2 = _mul_nbapi.OFPAT_SET_MPLS_TTL_2
OFPAT_DEC_MPLS_TTL_2 = _mul_nbapi.OFPAT_DEC_MPLS_TTL_2
OFPAT_PUSH_VLAN_2 = _mul_nbapi.OFPAT_PUSH_VLAN_2
OFPAT_POP_VLAN_2 = _mul_nbapi.OFPAT_POP_VLAN_2
OFPAT_PUSH_MPLS_2 = _mul_nbapi.OFPAT_PUSH_MPLS_2
OFPAT_POP_MPLS_2 = _mul_nbapi.OFPAT_POP_MPLS_2
OFPAT_SET_QUEUE_2 = _mul_nbapi.OFPAT_SET_QUEUE_2
OFPAT_GROUP_2 = _mul_nbapi.OFPAT_GROUP_2
OFPAT_SET_NW_TTL_2 = _mul_nbapi.OFPAT_SET_NW_TTL_2
OFPAT_DEC_NW_TTL_2 = _mul_nbapi.OFPAT_DEC_NW_TTL_2
OFPAT_EXPERIMENTER = _mul_nbapi.OFPAT_EXPERIMENTER
class ofp_action_output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_output, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_output_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_output_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_output_type_get, _mul_nbapi.ofp_action_output_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_output_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_output_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_output_len_get, _mul_nbapi.ofp_action_output_len_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp_action_output_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp_action_output_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp_action_output_port_get, _mul_nbapi.ofp_action_output_port_set)
    __swig_setmethods__["max_len"] = _mul_nbapi.ofp_action_output_max_len_set
    __swig_getmethods__["max_len"] = _mul_nbapi.ofp_action_output_max_len_get
    if _newclass:max_len = _swig_property(_mul_nbapi.ofp_action_output_max_len_get, _mul_nbapi.ofp_action_output_max_len_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_output()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_output
    __del__ = lambda self : None;
ofp_action_output_swigregister = _mul_nbapi.ofp_action_output_swigregister
ofp_action_output_swigregister(ofp_action_output)

OFP_VLAN_NONE = _mul_nbapi.OFP_VLAN_NONE
class ofp_action_vlan_vid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_vlan_vid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_vlan_vid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_vlan_vid_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_vlan_vid_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_vlan_vid_type_get, _mul_nbapi.ofp_action_vlan_vid_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_vlan_vid_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_vlan_vid_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_vlan_vid_len_get, _mul_nbapi.ofp_action_vlan_vid_len_set)
    __swig_setmethods__["vlan_vid"] = _mul_nbapi.ofp_action_vlan_vid_vlan_vid_set
    __swig_getmethods__["vlan_vid"] = _mul_nbapi.ofp_action_vlan_vid_vlan_vid_get
    if _newclass:vlan_vid = _swig_property(_mul_nbapi.ofp_action_vlan_vid_vlan_vid_get, _mul_nbapi.ofp_action_vlan_vid_vlan_vid_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_vlan_vid_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_vlan_vid_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_vlan_vid_pad_get, _mul_nbapi.ofp_action_vlan_vid_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_vlan_vid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_vlan_vid
    __del__ = lambda self : None;
ofp_action_vlan_vid_swigregister = _mul_nbapi.ofp_action_vlan_vid_swigregister
ofp_action_vlan_vid_swigregister(ofp_action_vlan_vid)

class ofp_action_vlan_pcp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_vlan_pcp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_vlan_pcp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_vlan_pcp_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_vlan_pcp_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_vlan_pcp_type_get, _mul_nbapi.ofp_action_vlan_pcp_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_vlan_pcp_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_vlan_pcp_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_vlan_pcp_len_get, _mul_nbapi.ofp_action_vlan_pcp_len_set)
    __swig_setmethods__["vlan_pcp"] = _mul_nbapi.ofp_action_vlan_pcp_vlan_pcp_set
    __swig_getmethods__["vlan_pcp"] = _mul_nbapi.ofp_action_vlan_pcp_vlan_pcp_get
    if _newclass:vlan_pcp = _swig_property(_mul_nbapi.ofp_action_vlan_pcp_vlan_pcp_get, _mul_nbapi.ofp_action_vlan_pcp_vlan_pcp_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_vlan_pcp_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_vlan_pcp_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_vlan_pcp_pad_get, _mul_nbapi.ofp_action_vlan_pcp_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_vlan_pcp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_vlan_pcp
    __del__ = lambda self : None;
ofp_action_vlan_pcp_swigregister = _mul_nbapi.ofp_action_vlan_pcp_swigregister
ofp_action_vlan_pcp_swigregister(ofp_action_vlan_pcp)

class ofp_action_dl_addr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_dl_addr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_dl_addr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_dl_addr_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_dl_addr_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_dl_addr_type_get, _mul_nbapi.ofp_action_dl_addr_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_dl_addr_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_dl_addr_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_dl_addr_len_get, _mul_nbapi.ofp_action_dl_addr_len_set)
    __swig_setmethods__["dl_addr"] = _mul_nbapi.ofp_action_dl_addr_dl_addr_set
    __swig_getmethods__["dl_addr"] = _mul_nbapi.ofp_action_dl_addr_dl_addr_get
    if _newclass:dl_addr = _swig_property(_mul_nbapi.ofp_action_dl_addr_dl_addr_get, _mul_nbapi.ofp_action_dl_addr_dl_addr_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_dl_addr_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_dl_addr_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_dl_addr_pad_get, _mul_nbapi.ofp_action_dl_addr_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_dl_addr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_dl_addr
    __del__ = lambda self : None;
ofp_action_dl_addr_swigregister = _mul_nbapi.ofp_action_dl_addr_swigregister
ofp_action_dl_addr_swigregister(ofp_action_dl_addr)

class ofp_action_nw_addr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_nw_addr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_nw_addr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_nw_addr_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_nw_addr_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_nw_addr_type_get, _mul_nbapi.ofp_action_nw_addr_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_nw_addr_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_nw_addr_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_nw_addr_len_get, _mul_nbapi.ofp_action_nw_addr_len_set)
    __swig_setmethods__["nw_addr"] = _mul_nbapi.ofp_action_nw_addr_nw_addr_set
    __swig_getmethods__["nw_addr"] = _mul_nbapi.ofp_action_nw_addr_nw_addr_get
    if _newclass:nw_addr = _swig_property(_mul_nbapi.ofp_action_nw_addr_nw_addr_get, _mul_nbapi.ofp_action_nw_addr_nw_addr_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_nw_addr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_nw_addr
    __del__ = lambda self : None;
ofp_action_nw_addr_swigregister = _mul_nbapi.ofp_action_nw_addr_swigregister
ofp_action_nw_addr_swigregister(ofp_action_nw_addr)

class ofp_action_tp_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_tp_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_tp_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_tp_port_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_tp_port_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_tp_port_type_get, _mul_nbapi.ofp_action_tp_port_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_tp_port_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_tp_port_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_tp_port_len_get, _mul_nbapi.ofp_action_tp_port_len_set)
    __swig_setmethods__["tp_port"] = _mul_nbapi.ofp_action_tp_port_tp_port_set
    __swig_getmethods__["tp_port"] = _mul_nbapi.ofp_action_tp_port_tp_port_get
    if _newclass:tp_port = _swig_property(_mul_nbapi.ofp_action_tp_port_tp_port_get, _mul_nbapi.ofp_action_tp_port_tp_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_tp_port_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_tp_port_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_tp_port_pad_get, _mul_nbapi.ofp_action_tp_port_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_tp_port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_tp_port
    __del__ = lambda self : None;
ofp_action_tp_port_swigregister = _mul_nbapi.ofp_action_tp_port_swigregister
ofp_action_tp_port_swigregister(ofp_action_tp_port)

class ofp_action_nw_tos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_nw_tos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_nw_tos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_nw_tos_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_nw_tos_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_nw_tos_type_get, _mul_nbapi.ofp_action_nw_tos_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_nw_tos_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_nw_tos_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_nw_tos_len_get, _mul_nbapi.ofp_action_nw_tos_len_set)
    __swig_setmethods__["nw_tos"] = _mul_nbapi.ofp_action_nw_tos_nw_tos_set
    __swig_getmethods__["nw_tos"] = _mul_nbapi.ofp_action_nw_tos_nw_tos_get
    if _newclass:nw_tos = _swig_property(_mul_nbapi.ofp_action_nw_tos_nw_tos_get, _mul_nbapi.ofp_action_nw_tos_nw_tos_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_nw_tos_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_nw_tos_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_nw_tos_pad_get, _mul_nbapi.ofp_action_nw_tos_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_nw_tos()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_nw_tos
    __del__ = lambda self : None;
ofp_action_nw_tos_swigregister = _mul_nbapi.ofp_action_nw_tos_swigregister
ofp_action_nw_tos_swigregister(ofp_action_nw_tos)

class ofp_action_vendor_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_vendor_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_vendor_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_vendor_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_vendor_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_vendor_header_type_get, _mul_nbapi.ofp_action_vendor_header_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_vendor_header_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_vendor_header_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_vendor_header_len_get, _mul_nbapi.ofp_action_vendor_header_len_set)
    __swig_setmethods__["vendor"] = _mul_nbapi.ofp_action_vendor_header_vendor_set
    __swig_getmethods__["vendor"] = _mul_nbapi.ofp_action_vendor_header_vendor_get
    if _newclass:vendor = _swig_property(_mul_nbapi.ofp_action_vendor_header_vendor_get, _mul_nbapi.ofp_action_vendor_header_vendor_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_vendor_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_vendor_header
    __del__ = lambda self : None;
ofp_action_vendor_header_swigregister = _mul_nbapi.ofp_action_vendor_header_swigregister
ofp_action_vendor_header_swigregister(ofp_action_vendor_header)

class ofp_action_kulcloud(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_kulcloud, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_kulcloud, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_kulcloud_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_kulcloud_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_kulcloud_type_get, _mul_nbapi.ofp_action_kulcloud_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_kulcloud_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_kulcloud_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_kulcloud_len_get, _mul_nbapi.ofp_action_kulcloud_len_set)
    __swig_setmethods__["kulcloud"] = _mul_nbapi.ofp_action_kulcloud_kulcloud_set
    __swig_getmethods__["kulcloud"] = _mul_nbapi.ofp_action_kulcloud_kulcloud_get
    if _newclass:kulcloud = _swig_property(_mul_nbapi.ofp_action_kulcloud_kulcloud_get, _mul_nbapi.ofp_action_kulcloud_kulcloud_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_kulcloud()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_kulcloud
    __del__ = lambda self : None;
ofp_action_kulcloud_swigregister = _mul_nbapi.ofp_action_kulcloud_swigregister
ofp_action_kulcloud_swigregister(ofp_action_kulcloud)

class ofp_action_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_header_type_get, _mul_nbapi.ofp_action_header_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_header_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_header_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_header_len_get, _mul_nbapi.ofp_action_header_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_header_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_header_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_header_pad_get, _mul_nbapi.ofp_action_header_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_header
    __del__ = lambda self : None;
ofp_action_header_swigregister = _mul_nbapi.ofp_action_header_swigregister
ofp_action_header_swigregister(ofp_action_header)

class ofp_packet_out(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_packet_out, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_packet_out, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_packet_out_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_packet_out_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_packet_out_header_get, _mul_nbapi.ofp_packet_out_header_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp_packet_out_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp_packet_out_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp_packet_out_buffer_id_get, _mul_nbapi.ofp_packet_out_buffer_id_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.ofp_packet_out_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.ofp_packet_out_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.ofp_packet_out_in_port_get, _mul_nbapi.ofp_packet_out_in_port_set)
    __swig_setmethods__["actions_len"] = _mul_nbapi.ofp_packet_out_actions_len_set
    __swig_getmethods__["actions_len"] = _mul_nbapi.ofp_packet_out_actions_len_get
    if _newclass:actions_len = _swig_property(_mul_nbapi.ofp_packet_out_actions_len_get, _mul_nbapi.ofp_packet_out_actions_len_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp_packet_out_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp_packet_out_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp_packet_out_actions_get, _mul_nbapi.ofp_packet_out_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_packet_out()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_packet_out
    __del__ = lambda self : None;
ofp_packet_out_swigregister = _mul_nbapi.ofp_packet_out_swigregister
ofp_packet_out_swigregister(ofp_packet_out)

OFPFC_ADD = _mul_nbapi.OFPFC_ADD
OFPFC_MODIFY = _mul_nbapi.OFPFC_MODIFY
OFPFC_MODIFY_STRICT = _mul_nbapi.OFPFC_MODIFY_STRICT
OFPFC_DELETE = _mul_nbapi.OFPFC_DELETE
OFPFC_DELETE_STRICT = _mul_nbapi.OFPFC_DELETE_STRICT
OFPFW_IN_PORT = _mul_nbapi.OFPFW_IN_PORT
OFPFW_DL_VLAN = _mul_nbapi.OFPFW_DL_VLAN
OFPFW_DL_SRC = _mul_nbapi.OFPFW_DL_SRC
OFPFW_DL_DST = _mul_nbapi.OFPFW_DL_DST
OFPFW_DL_TYPE = _mul_nbapi.OFPFW_DL_TYPE
OFPFW_NW_PROTO = _mul_nbapi.OFPFW_NW_PROTO
OFPFW_TP_SRC = _mul_nbapi.OFPFW_TP_SRC
OFPFW_TP_DST = _mul_nbapi.OFPFW_TP_DST
OFPFW_NW_SRC_SHIFT = _mul_nbapi.OFPFW_NW_SRC_SHIFT
OFPFW_NW_SRC_BITS = _mul_nbapi.OFPFW_NW_SRC_BITS
OFPFW_NW_SRC_MASK = _mul_nbapi.OFPFW_NW_SRC_MASK
OFPFW_NW_SRC_ALL = _mul_nbapi.OFPFW_NW_SRC_ALL
OFPFW_NW_DST_SHIFT = _mul_nbapi.OFPFW_NW_DST_SHIFT
OFPFW_NW_DST_BITS = _mul_nbapi.OFPFW_NW_DST_BITS
OFPFW_NW_DST_MASK = _mul_nbapi.OFPFW_NW_DST_MASK
OFPFW_NW_DST_ALL = _mul_nbapi.OFPFW_NW_DST_ALL
OFPFW_DL_VLAN_PCP = _mul_nbapi.OFPFW_DL_VLAN_PCP
OFPFW_NW_TOS = _mul_nbapi.OFPFW_NW_TOS
OFPFW_ALL = _mul_nbapi.OFPFW_ALL
OFPFW_IN_PORT_2 = _mul_nbapi.OFPFW_IN_PORT_2
OFPFW_DL_VLAN_2 = _mul_nbapi.OFPFW_DL_VLAN_2
OFPFW_DL_VLAN_PCP_2 = _mul_nbapi.OFPFW_DL_VLAN_PCP_2
OFPFW_DL_TYPE_2 = _mul_nbapi.OFPFW_DL_TYPE_2
OFPFW_NW_TOS_2 = _mul_nbapi.OFPFW_NW_TOS_2
OFPFW_NW_PROTO_2 = _mul_nbapi.OFPFW_NW_PROTO_2
OFPFW_TP_SRC_2 = _mul_nbapi.OFPFW_TP_SRC_2
OFPFW_TP_DST_2 = _mul_nbapi.OFPFW_TP_DST_2
OFPFW_MPLS_LABEL_2 = _mul_nbapi.OFPFW_MPLS_LABEL_2
OFPFW_MPLS_TC_2 = _mul_nbapi.OFPFW_MPLS_TC_2
OFPFW_ALL_2 = _mul_nbapi.OFPFW_ALL_2
OFP_DL_TYPE_ETH2_CUTOFF = _mul_nbapi.OFP_DL_TYPE_ETH2_CUTOFF
OFP_DL_TYPE_NOT_ETH_TYPE = _mul_nbapi.OFP_DL_TYPE_NOT_ETH_TYPE
class ofp_match(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_match, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_match, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wildcards"] = _mul_nbapi.ofp_match_wildcards_set
    __swig_getmethods__["wildcards"] = _mul_nbapi.ofp_match_wildcards_get
    if _newclass:wildcards = _swig_property(_mul_nbapi.ofp_match_wildcards_get, _mul_nbapi.ofp_match_wildcards_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.ofp_match_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.ofp_match_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.ofp_match_in_port_get, _mul_nbapi.ofp_match_in_port_set)
    __swig_setmethods__["dl_src"] = _mul_nbapi.ofp_match_dl_src_set
    __swig_getmethods__["dl_src"] = _mul_nbapi.ofp_match_dl_src_get
    if _newclass:dl_src = _swig_property(_mul_nbapi.ofp_match_dl_src_get, _mul_nbapi.ofp_match_dl_src_set)
    __swig_setmethods__["dl_dst"] = _mul_nbapi.ofp_match_dl_dst_set
    __swig_getmethods__["dl_dst"] = _mul_nbapi.ofp_match_dl_dst_get
    if _newclass:dl_dst = _swig_property(_mul_nbapi.ofp_match_dl_dst_get, _mul_nbapi.ofp_match_dl_dst_set)
    __swig_setmethods__["dl_vlan"] = _mul_nbapi.ofp_match_dl_vlan_set
    __swig_getmethods__["dl_vlan"] = _mul_nbapi.ofp_match_dl_vlan_get
    if _newclass:dl_vlan = _swig_property(_mul_nbapi.ofp_match_dl_vlan_get, _mul_nbapi.ofp_match_dl_vlan_set)
    __swig_setmethods__["dl_vlan_pcp"] = _mul_nbapi.ofp_match_dl_vlan_pcp_set
    __swig_getmethods__["dl_vlan_pcp"] = _mul_nbapi.ofp_match_dl_vlan_pcp_get
    if _newclass:dl_vlan_pcp = _swig_property(_mul_nbapi.ofp_match_dl_vlan_pcp_get, _mul_nbapi.ofp_match_dl_vlan_pcp_set)
    __swig_setmethods__["pad1"] = _mul_nbapi.ofp_match_pad1_set
    __swig_getmethods__["pad1"] = _mul_nbapi.ofp_match_pad1_get
    if _newclass:pad1 = _swig_property(_mul_nbapi.ofp_match_pad1_get, _mul_nbapi.ofp_match_pad1_set)
    __swig_setmethods__["dl_type"] = _mul_nbapi.ofp_match_dl_type_set
    __swig_getmethods__["dl_type"] = _mul_nbapi.ofp_match_dl_type_get
    if _newclass:dl_type = _swig_property(_mul_nbapi.ofp_match_dl_type_get, _mul_nbapi.ofp_match_dl_type_set)
    __swig_setmethods__["nw_tos"] = _mul_nbapi.ofp_match_nw_tos_set
    __swig_getmethods__["nw_tos"] = _mul_nbapi.ofp_match_nw_tos_get
    if _newclass:nw_tos = _swig_property(_mul_nbapi.ofp_match_nw_tos_get, _mul_nbapi.ofp_match_nw_tos_set)
    __swig_setmethods__["nw_proto"] = _mul_nbapi.ofp_match_nw_proto_set
    __swig_getmethods__["nw_proto"] = _mul_nbapi.ofp_match_nw_proto_get
    if _newclass:nw_proto = _swig_property(_mul_nbapi.ofp_match_nw_proto_get, _mul_nbapi.ofp_match_nw_proto_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp_match_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp_match_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp_match_pad2_get, _mul_nbapi.ofp_match_pad2_set)
    __swig_setmethods__["nw_src"] = _mul_nbapi.ofp_match_nw_src_set
    __swig_getmethods__["nw_src"] = _mul_nbapi.ofp_match_nw_src_get
    if _newclass:nw_src = _swig_property(_mul_nbapi.ofp_match_nw_src_get, _mul_nbapi.ofp_match_nw_src_set)
    __swig_setmethods__["nw_dst"] = _mul_nbapi.ofp_match_nw_dst_set
    __swig_getmethods__["nw_dst"] = _mul_nbapi.ofp_match_nw_dst_get
    if _newclass:nw_dst = _swig_property(_mul_nbapi.ofp_match_nw_dst_get, _mul_nbapi.ofp_match_nw_dst_set)
    __swig_setmethods__["tp_src"] = _mul_nbapi.ofp_match_tp_src_set
    __swig_getmethods__["tp_src"] = _mul_nbapi.ofp_match_tp_src_get
    if _newclass:tp_src = _swig_property(_mul_nbapi.ofp_match_tp_src_get, _mul_nbapi.ofp_match_tp_src_set)
    __swig_setmethods__["tp_dst"] = _mul_nbapi.ofp_match_tp_dst_set
    __swig_getmethods__["tp_dst"] = _mul_nbapi.ofp_match_tp_dst_get
    if _newclass:tp_dst = _swig_property(_mul_nbapi.ofp_match_tp_dst_get, _mul_nbapi.ofp_match_tp_dst_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_match()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_match
    __del__ = lambda self : None;
ofp_match_swigregister = _mul_nbapi.ofp_match_swigregister
ofp_match_swigregister(ofp_match)

OFPIT_GOTO_TABLE = _mul_nbapi.OFPIT_GOTO_TABLE
OFPIT_WRITE_METADATA = _mul_nbapi.OFPIT_WRITE_METADATA
OFPIT_WRITE_ACTIONS = _mul_nbapi.OFPIT_WRITE_ACTIONS
OFPIT_APPLY_ACTIONS = _mul_nbapi.OFPIT_APPLY_ACTIONS
OFPIT_CLEAR_ACTIONS = _mul_nbapi.OFPIT_CLEAR_ACTIONS
OFPIT_EXPERIMENTER = _mul_nbapi.OFPIT_EXPERIMENTER
class ofp_instruction_goto_table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_instruction_goto_table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_instruction_goto_table, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_instruction_goto_table_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_instruction_goto_table_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_instruction_goto_table_type_get, _mul_nbapi.ofp_instruction_goto_table_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_instruction_goto_table_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_instruction_goto_table_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_instruction_goto_table_len_get, _mul_nbapi.ofp_instruction_goto_table_len_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_instruction_goto_table_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_instruction_goto_table_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_instruction_goto_table_table_id_get, _mul_nbapi.ofp_instruction_goto_table_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_instruction_goto_table_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_instruction_goto_table_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_instruction_goto_table_pad_get, _mul_nbapi.ofp_instruction_goto_table_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_instruction_goto_table()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_instruction_goto_table
    __del__ = lambda self : None;
ofp_instruction_goto_table_swigregister = _mul_nbapi.ofp_instruction_goto_table_swigregister
ofp_instruction_goto_table_swigregister(ofp_instruction_goto_table)

class ofp_instruction_write_metadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_instruction_write_metadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_instruction_write_metadata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_instruction_write_metadata_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_instruction_write_metadata_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_instruction_write_metadata_type_get, _mul_nbapi.ofp_instruction_write_metadata_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_instruction_write_metadata_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_instruction_write_metadata_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_instruction_write_metadata_len_get, _mul_nbapi.ofp_instruction_write_metadata_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_instruction_write_metadata_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_instruction_write_metadata_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_instruction_write_metadata_pad_get, _mul_nbapi.ofp_instruction_write_metadata_pad_set)
    __swig_setmethods__["metadata"] = _mul_nbapi.ofp_instruction_write_metadata_metadata_set
    __swig_getmethods__["metadata"] = _mul_nbapi.ofp_instruction_write_metadata_metadata_get
    if _newclass:metadata = _swig_property(_mul_nbapi.ofp_instruction_write_metadata_metadata_get, _mul_nbapi.ofp_instruction_write_metadata_metadata_set)
    __swig_setmethods__["metadata_mask"] = _mul_nbapi.ofp_instruction_write_metadata_metadata_mask_set
    __swig_getmethods__["metadata_mask"] = _mul_nbapi.ofp_instruction_write_metadata_metadata_mask_get
    if _newclass:metadata_mask = _swig_property(_mul_nbapi.ofp_instruction_write_metadata_metadata_mask_get, _mul_nbapi.ofp_instruction_write_metadata_metadata_mask_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_instruction_write_metadata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_instruction_write_metadata
    __del__ = lambda self : None;
ofp_instruction_write_metadata_swigregister = _mul_nbapi.ofp_instruction_write_metadata_swigregister
ofp_instruction_write_metadata_swigregister(ofp_instruction_write_metadata)

class ofp_instruction_actions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_instruction_actions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_instruction_actions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_instruction_actions_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_instruction_actions_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_instruction_actions_type_get, _mul_nbapi.ofp_instruction_actions_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_instruction_actions_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_instruction_actions_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_instruction_actions_len_get, _mul_nbapi.ofp_instruction_actions_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_instruction_actions_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_instruction_actions_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_instruction_actions_pad_get, _mul_nbapi.ofp_instruction_actions_pad_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp_instruction_actions_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp_instruction_actions_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp_instruction_actions_actions_get, _mul_nbapi.ofp_instruction_actions_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_instruction_actions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_instruction_actions
    __del__ = lambda self : None;
ofp_instruction_actions_swigregister = _mul_nbapi.ofp_instruction_actions_swigregister
ofp_instruction_actions_swigregister(ofp_instruction_actions)

class ofp_instruction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_instruction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_instruction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_instruction_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_instruction_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_instruction_type_get, _mul_nbapi.ofp_instruction_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_instruction_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_instruction_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_instruction_len_get, _mul_nbapi.ofp_instruction_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_instruction_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_instruction_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_instruction_pad_get, _mul_nbapi.ofp_instruction_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_instruction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_instruction
    __del__ = lambda self : None;
ofp_instruction_swigregister = _mul_nbapi.ofp_instruction_swigregister
ofp_instruction_swigregister(ofp_instruction)

OFPMT_STANDARD = _mul_nbapi.OFPMT_STANDARD
OFPMT_STANDARD_LENGTH = _mul_nbapi.OFPMT_STANDARD_LENGTH
class ofp_match_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_match_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_match_2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_match_2_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_match_2_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_match_2_type_get, _mul_nbapi.ofp_match_2_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_match_2_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_match_2_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_match_2_length_get, _mul_nbapi.ofp_match_2_length_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.ofp_match_2_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.ofp_match_2_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.ofp_match_2_in_port_get, _mul_nbapi.ofp_match_2_in_port_set)
    __swig_setmethods__["wildcards"] = _mul_nbapi.ofp_match_2_wildcards_set
    __swig_getmethods__["wildcards"] = _mul_nbapi.ofp_match_2_wildcards_get
    if _newclass:wildcards = _swig_property(_mul_nbapi.ofp_match_2_wildcards_get, _mul_nbapi.ofp_match_2_wildcards_set)
    __swig_setmethods__["dl_src"] = _mul_nbapi.ofp_match_2_dl_src_set
    __swig_getmethods__["dl_src"] = _mul_nbapi.ofp_match_2_dl_src_get
    if _newclass:dl_src = _swig_property(_mul_nbapi.ofp_match_2_dl_src_get, _mul_nbapi.ofp_match_2_dl_src_set)
    __swig_setmethods__["dl_src_mask"] = _mul_nbapi.ofp_match_2_dl_src_mask_set
    __swig_getmethods__["dl_src_mask"] = _mul_nbapi.ofp_match_2_dl_src_mask_get
    if _newclass:dl_src_mask = _swig_property(_mul_nbapi.ofp_match_2_dl_src_mask_get, _mul_nbapi.ofp_match_2_dl_src_mask_set)
    __swig_setmethods__["dl_dst"] = _mul_nbapi.ofp_match_2_dl_dst_set
    __swig_getmethods__["dl_dst"] = _mul_nbapi.ofp_match_2_dl_dst_get
    if _newclass:dl_dst = _swig_property(_mul_nbapi.ofp_match_2_dl_dst_get, _mul_nbapi.ofp_match_2_dl_dst_set)
    __swig_setmethods__["dl_dst_mask"] = _mul_nbapi.ofp_match_2_dl_dst_mask_set
    __swig_getmethods__["dl_dst_mask"] = _mul_nbapi.ofp_match_2_dl_dst_mask_get
    if _newclass:dl_dst_mask = _swig_property(_mul_nbapi.ofp_match_2_dl_dst_mask_get, _mul_nbapi.ofp_match_2_dl_dst_mask_set)
    __swig_setmethods__["dl_vlan"] = _mul_nbapi.ofp_match_2_dl_vlan_set
    __swig_getmethods__["dl_vlan"] = _mul_nbapi.ofp_match_2_dl_vlan_get
    if _newclass:dl_vlan = _swig_property(_mul_nbapi.ofp_match_2_dl_vlan_get, _mul_nbapi.ofp_match_2_dl_vlan_set)
    __swig_setmethods__["dl_vlan_pcp"] = _mul_nbapi.ofp_match_2_dl_vlan_pcp_set
    __swig_getmethods__["dl_vlan_pcp"] = _mul_nbapi.ofp_match_2_dl_vlan_pcp_get
    if _newclass:dl_vlan_pcp = _swig_property(_mul_nbapi.ofp_match_2_dl_vlan_pcp_get, _mul_nbapi.ofp_match_2_dl_vlan_pcp_set)
    __swig_setmethods__["pad1"] = _mul_nbapi.ofp_match_2_pad1_set
    __swig_getmethods__["pad1"] = _mul_nbapi.ofp_match_2_pad1_get
    if _newclass:pad1 = _swig_property(_mul_nbapi.ofp_match_2_pad1_get, _mul_nbapi.ofp_match_2_pad1_set)
    __swig_setmethods__["dl_type"] = _mul_nbapi.ofp_match_2_dl_type_set
    __swig_getmethods__["dl_type"] = _mul_nbapi.ofp_match_2_dl_type_get
    if _newclass:dl_type = _swig_property(_mul_nbapi.ofp_match_2_dl_type_get, _mul_nbapi.ofp_match_2_dl_type_set)
    __swig_setmethods__["nw_tos"] = _mul_nbapi.ofp_match_2_nw_tos_set
    __swig_getmethods__["nw_tos"] = _mul_nbapi.ofp_match_2_nw_tos_get
    if _newclass:nw_tos = _swig_property(_mul_nbapi.ofp_match_2_nw_tos_get, _mul_nbapi.ofp_match_2_nw_tos_set)
    __swig_setmethods__["nw_proto"] = _mul_nbapi.ofp_match_2_nw_proto_set
    __swig_getmethods__["nw_proto"] = _mul_nbapi.ofp_match_2_nw_proto_get
    if _newclass:nw_proto = _swig_property(_mul_nbapi.ofp_match_2_nw_proto_get, _mul_nbapi.ofp_match_2_nw_proto_set)
    __swig_setmethods__["nw_src"] = _mul_nbapi.ofp_match_2_nw_src_set
    __swig_getmethods__["nw_src"] = _mul_nbapi.ofp_match_2_nw_src_get
    if _newclass:nw_src = _swig_property(_mul_nbapi.ofp_match_2_nw_src_get, _mul_nbapi.ofp_match_2_nw_src_set)
    __swig_setmethods__["nw_src_mask"] = _mul_nbapi.ofp_match_2_nw_src_mask_set
    __swig_getmethods__["nw_src_mask"] = _mul_nbapi.ofp_match_2_nw_src_mask_get
    if _newclass:nw_src_mask = _swig_property(_mul_nbapi.ofp_match_2_nw_src_mask_get, _mul_nbapi.ofp_match_2_nw_src_mask_set)
    __swig_setmethods__["nw_dst"] = _mul_nbapi.ofp_match_2_nw_dst_set
    __swig_getmethods__["nw_dst"] = _mul_nbapi.ofp_match_2_nw_dst_get
    if _newclass:nw_dst = _swig_property(_mul_nbapi.ofp_match_2_nw_dst_get, _mul_nbapi.ofp_match_2_nw_dst_set)
    __swig_setmethods__["nw_dst_mask"] = _mul_nbapi.ofp_match_2_nw_dst_mask_set
    __swig_getmethods__["nw_dst_mask"] = _mul_nbapi.ofp_match_2_nw_dst_mask_get
    if _newclass:nw_dst_mask = _swig_property(_mul_nbapi.ofp_match_2_nw_dst_mask_get, _mul_nbapi.ofp_match_2_nw_dst_mask_set)
    __swig_setmethods__["tp_src"] = _mul_nbapi.ofp_match_2_tp_src_set
    __swig_getmethods__["tp_src"] = _mul_nbapi.ofp_match_2_tp_src_get
    if _newclass:tp_src = _swig_property(_mul_nbapi.ofp_match_2_tp_src_get, _mul_nbapi.ofp_match_2_tp_src_set)
    __swig_setmethods__["tp_dst"] = _mul_nbapi.ofp_match_2_tp_dst_set
    __swig_getmethods__["tp_dst"] = _mul_nbapi.ofp_match_2_tp_dst_get
    if _newclass:tp_dst = _swig_property(_mul_nbapi.ofp_match_2_tp_dst_get, _mul_nbapi.ofp_match_2_tp_dst_set)
    __swig_setmethods__["mpls_label"] = _mul_nbapi.ofp_match_2_mpls_label_set
    __swig_getmethods__["mpls_label"] = _mul_nbapi.ofp_match_2_mpls_label_get
    if _newclass:mpls_label = _swig_property(_mul_nbapi.ofp_match_2_mpls_label_get, _mul_nbapi.ofp_match_2_mpls_label_set)
    __swig_setmethods__["mpls_tc"] = _mul_nbapi.ofp_match_2_mpls_tc_set
    __swig_getmethods__["mpls_tc"] = _mul_nbapi.ofp_match_2_mpls_tc_get
    if _newclass:mpls_tc = _swig_property(_mul_nbapi.ofp_match_2_mpls_tc_get, _mul_nbapi.ofp_match_2_mpls_tc_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp_match_2_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp_match_2_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp_match_2_pad2_get, _mul_nbapi.ofp_match_2_pad2_set)
    __swig_setmethods__["metadata"] = _mul_nbapi.ofp_match_2_metadata_set
    __swig_getmethods__["metadata"] = _mul_nbapi.ofp_match_2_metadata_get
    if _newclass:metadata = _swig_property(_mul_nbapi.ofp_match_2_metadata_get, _mul_nbapi.ofp_match_2_metadata_set)
    __swig_setmethods__["metadata_mask"] = _mul_nbapi.ofp_match_2_metadata_mask_set
    __swig_getmethods__["metadata_mask"] = _mul_nbapi.ofp_match_2_metadata_mask_get
    if _newclass:metadata_mask = _swig_property(_mul_nbapi.ofp_match_2_metadata_mask_get, _mul_nbapi.ofp_match_2_metadata_mask_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_match_2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_match_2
    __del__ = lambda self : None;
ofp_match_2_swigregister = _mul_nbapi.ofp_match_2_swigregister
ofp_match_2_swigregister(ofp_match_2)

OFP_FLOW_PERMANENT = _mul_nbapi.OFP_FLOW_PERMANENT
OFP_DEFAULT_PRIORITY = _mul_nbapi.OFP_DEFAULT_PRIORITY
OFPFF_SEND_FLOW_REM = _mul_nbapi.OFPFF_SEND_FLOW_REM
OFPFF_CHECK_OVERLAP = _mul_nbapi.OFPFF_CHECK_OVERLAP
OFPFF_EMERG = _mul_nbapi.OFPFF_EMERG
class ofp_flow_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_flow_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_flow_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_flow_mod_header_get, _mul_nbapi.ofp_flow_mod_header_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp_flow_mod_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp_flow_mod_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp_flow_mod_match_get, _mul_nbapi.ofp_flow_mod_match_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp_flow_mod_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp_flow_mod_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp_flow_mod_cookie_get, _mul_nbapi.ofp_flow_mod_cookie_set)
    __swig_setmethods__["command"] = _mul_nbapi.ofp_flow_mod_command_set
    __swig_getmethods__["command"] = _mul_nbapi.ofp_flow_mod_command_get
    if _newclass:command = _swig_property(_mul_nbapi.ofp_flow_mod_command_get, _mul_nbapi.ofp_flow_mod_command_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_mod_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_mod_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp_flow_mod_idle_timeout_get, _mul_nbapi.ofp_flow_mod_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _mul_nbapi.ofp_flow_mod_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _mul_nbapi.ofp_flow_mod_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_mul_nbapi.ofp_flow_mod_hard_timeout_get, _mul_nbapi.ofp_flow_mod_hard_timeout_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp_flow_mod_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp_flow_mod_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp_flow_mod_priority_get, _mul_nbapi.ofp_flow_mod_priority_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp_flow_mod_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp_flow_mod_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp_flow_mod_buffer_id_get, _mul_nbapi.ofp_flow_mod_buffer_id_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp_flow_mod_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp_flow_mod_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp_flow_mod_out_port_get, _mul_nbapi.ofp_flow_mod_out_port_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_flow_mod_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_flow_mod_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_flow_mod_flags_get, _mul_nbapi.ofp_flow_mod_flags_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp_flow_mod_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp_flow_mod_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp_flow_mod_actions_get, _mul_nbapi.ofp_flow_mod_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_flow_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_flow_mod
    __del__ = lambda self : None;
ofp_flow_mod_swigregister = _mul_nbapi.ofp_flow_mod_swigregister
ofp_flow_mod_swigregister(ofp_flow_mod)

class ofp_flow_mod_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_mod_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_mod_2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_flow_mod_2_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_flow_mod_2_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_flow_mod_2_header_get, _mul_nbapi.ofp_flow_mod_2_header_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp_flow_mod_2_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp_flow_mod_2_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp_flow_mod_2_cookie_get, _mul_nbapi.ofp_flow_mod_2_cookie_set)
    __swig_setmethods__["cookie_mask"] = _mul_nbapi.ofp_flow_mod_2_cookie_mask_set
    __swig_getmethods__["cookie_mask"] = _mul_nbapi.ofp_flow_mod_2_cookie_mask_get
    if _newclass:cookie_mask = _swig_property(_mul_nbapi.ofp_flow_mod_2_cookie_mask_get, _mul_nbapi.ofp_flow_mod_2_cookie_mask_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_flow_mod_2_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_flow_mod_2_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_flow_mod_2_table_id_get, _mul_nbapi.ofp_flow_mod_2_table_id_set)
    __swig_setmethods__["command"] = _mul_nbapi.ofp_flow_mod_2_command_set
    __swig_getmethods__["command"] = _mul_nbapi.ofp_flow_mod_2_command_get
    if _newclass:command = _swig_property(_mul_nbapi.ofp_flow_mod_2_command_get, _mul_nbapi.ofp_flow_mod_2_command_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_mod_2_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_mod_2_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp_flow_mod_2_idle_timeout_get, _mul_nbapi.ofp_flow_mod_2_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _mul_nbapi.ofp_flow_mod_2_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _mul_nbapi.ofp_flow_mod_2_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_mul_nbapi.ofp_flow_mod_2_hard_timeout_get, _mul_nbapi.ofp_flow_mod_2_hard_timeout_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp_flow_mod_2_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp_flow_mod_2_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp_flow_mod_2_priority_get, _mul_nbapi.ofp_flow_mod_2_priority_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp_flow_mod_2_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp_flow_mod_2_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp_flow_mod_2_buffer_id_get, _mul_nbapi.ofp_flow_mod_2_buffer_id_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp_flow_mod_2_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp_flow_mod_2_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp_flow_mod_2_out_port_get, _mul_nbapi.ofp_flow_mod_2_out_port_set)
    __swig_setmethods__["out_group"] = _mul_nbapi.ofp_flow_mod_2_out_group_set
    __swig_getmethods__["out_group"] = _mul_nbapi.ofp_flow_mod_2_out_group_get
    if _newclass:out_group = _swig_property(_mul_nbapi.ofp_flow_mod_2_out_group_get, _mul_nbapi.ofp_flow_mod_2_out_group_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_flow_mod_2_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_flow_mod_2_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_flow_mod_2_flags_get, _mul_nbapi.ofp_flow_mod_2_flags_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_flow_mod_2_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_flow_mod_2_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_flow_mod_2_pad_get, _mul_nbapi.ofp_flow_mod_2_pad_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp_flow_mod_2_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp_flow_mod_2_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp_flow_mod_2_match_get, _mul_nbapi.ofp_flow_mod_2_match_set)
    __swig_setmethods__["instructions"] = _mul_nbapi.ofp_flow_mod_2_instructions_set
    __swig_getmethods__["instructions"] = _mul_nbapi.ofp_flow_mod_2_instructions_get
    if _newclass:instructions = _swig_property(_mul_nbapi.ofp_flow_mod_2_instructions_get, _mul_nbapi.ofp_flow_mod_2_instructions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_flow_mod_2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_flow_mod_2
    __del__ = lambda self : None;
ofp_flow_mod_2_swigregister = _mul_nbapi.ofp_flow_mod_2_swigregister
ofp_flow_mod_2_swigregister(ofp_flow_mod_2)

OFPRR_IDLE_TIMEOUT = _mul_nbapi.OFPRR_IDLE_TIMEOUT
OFPRR_HARD_TIMEOUT = _mul_nbapi.OFPRR_HARD_TIMEOUT
OFPRR_DELETE = _mul_nbapi.OFPRR_DELETE
class ofp_flow_removed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_removed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_removed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_flow_removed_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_flow_removed_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_flow_removed_header_get, _mul_nbapi.ofp_flow_removed_header_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp_flow_removed_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp_flow_removed_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp_flow_removed_match_get, _mul_nbapi.ofp_flow_removed_match_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp_flow_removed_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp_flow_removed_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp_flow_removed_cookie_get, _mul_nbapi.ofp_flow_removed_cookie_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp_flow_removed_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp_flow_removed_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp_flow_removed_priority_get, _mul_nbapi.ofp_flow_removed_priority_set)
    __swig_setmethods__["reason"] = _mul_nbapi.ofp_flow_removed_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.ofp_flow_removed_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.ofp_flow_removed_reason_get, _mul_nbapi.ofp_flow_removed_reason_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_flow_removed_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_flow_removed_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_flow_removed_pad_get, _mul_nbapi.ofp_flow_removed_pad_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp_flow_removed_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp_flow_removed_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp_flow_removed_duration_sec_get, _mul_nbapi.ofp_flow_removed_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp_flow_removed_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp_flow_removed_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp_flow_removed_duration_nsec_get, _mul_nbapi.ofp_flow_removed_duration_nsec_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_removed_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_removed_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp_flow_removed_idle_timeout_get, _mul_nbapi.ofp_flow_removed_idle_timeout_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp_flow_removed_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp_flow_removed_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp_flow_removed_pad2_get, _mul_nbapi.ofp_flow_removed_pad2_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.ofp_flow_removed_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.ofp_flow_removed_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.ofp_flow_removed_packet_count_get, _mul_nbapi.ofp_flow_removed_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.ofp_flow_removed_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.ofp_flow_removed_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.ofp_flow_removed_byte_count_get, _mul_nbapi.ofp_flow_removed_byte_count_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_flow_removed()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_flow_removed
    __del__ = lambda self : None;
ofp_flow_removed_swigregister = _mul_nbapi.ofp_flow_removed_swigregister
ofp_flow_removed_swigregister(ofp_flow_removed)

OFPET_HELLO_FAILED = _mul_nbapi.OFPET_HELLO_FAILED
OFPET_BAD_REQUEST = _mul_nbapi.OFPET_BAD_REQUEST
OFPET_BAD_ACTION = _mul_nbapi.OFPET_BAD_ACTION
OFPET_FLOW_MOD_FAILED = _mul_nbapi.OFPET_FLOW_MOD_FAILED
OFPET_PORT_MOD_FAILED = _mul_nbapi.OFPET_PORT_MOD_FAILED
OFPET_QUEUE_OP_FAILED = _mul_nbapi.OFPET_QUEUE_OP_FAILED
OFPHFC_INCOMPATIBLE = _mul_nbapi.OFPHFC_INCOMPATIBLE
OFPHFC_EPERM = _mul_nbapi.OFPHFC_EPERM
OFPBRC_BAD_VERSION = _mul_nbapi.OFPBRC_BAD_VERSION
OFPBRC_BAD_TYPE = _mul_nbapi.OFPBRC_BAD_TYPE
OFPBRC_BAD_STAT = _mul_nbapi.OFPBRC_BAD_STAT
OFPBRC_BAD_VENDOR = _mul_nbapi.OFPBRC_BAD_VENDOR
OFPBRC_BAD_SUBTYPE = _mul_nbapi.OFPBRC_BAD_SUBTYPE
OFPBRC_EPERM = _mul_nbapi.OFPBRC_EPERM
OFPBRC_BAD_LEN = _mul_nbapi.OFPBRC_BAD_LEN
OFPBRC_BUFFER_EMPTY = _mul_nbapi.OFPBRC_BUFFER_EMPTY
OFPBRC_BUFFER_UNKNOWN = _mul_nbapi.OFPBRC_BUFFER_UNKNOWN
OFPBAC_BAD_TYPE = _mul_nbapi.OFPBAC_BAD_TYPE
OFPBAC_BAD_LEN = _mul_nbapi.OFPBAC_BAD_LEN
OFPBAC_BAD_VENDOR = _mul_nbapi.OFPBAC_BAD_VENDOR
OFPBAC_BAD_VENDOR_TYPE = _mul_nbapi.OFPBAC_BAD_VENDOR_TYPE
OFPBAC_BAD_OUT_PORT = _mul_nbapi.OFPBAC_BAD_OUT_PORT
OFPBAC_BAD_ARGUMENT = _mul_nbapi.OFPBAC_BAD_ARGUMENT
OFPBAC_EPERM = _mul_nbapi.OFPBAC_EPERM
OFPBAC_TOO_MANY = _mul_nbapi.OFPBAC_TOO_MANY
OFPBAC_BAD_QUEUE = _mul_nbapi.OFPBAC_BAD_QUEUE
OFPFMFC_ALL_TABLES_FULL = _mul_nbapi.OFPFMFC_ALL_TABLES_FULL
OFPFMFC_OVERLAP = _mul_nbapi.OFPFMFC_OVERLAP
OFPFMFC_EPERM = _mul_nbapi.OFPFMFC_EPERM
OFPFMFC_BAD_EMERG_TIMEOUT = _mul_nbapi.OFPFMFC_BAD_EMERG_TIMEOUT
OFPFMFC_BAD_COMMAND = _mul_nbapi.OFPFMFC_BAD_COMMAND
OFPFMFC_UNSUPPORTED = _mul_nbapi.OFPFMFC_UNSUPPORTED
OFPPMFC_BAD_PORT = _mul_nbapi.OFPPMFC_BAD_PORT
OFPPMFC_BAD_HW_ADDR = _mul_nbapi.OFPPMFC_BAD_HW_ADDR
OFPQOFC_BAD_PORT = _mul_nbapi.OFPQOFC_BAD_PORT
OFPQOFC_BAD_QUEUE = _mul_nbapi.OFPQOFC_BAD_QUEUE
OFPQOFC_EPERM = _mul_nbapi.OFPQOFC_EPERM
class ofp_error_msg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_error_msg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_error_msg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_error_msg_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_error_msg_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_error_msg_header_get, _mul_nbapi.ofp_error_msg_header_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp_error_msg_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_error_msg_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_error_msg_type_get, _mul_nbapi.ofp_error_msg_type_set)
    __swig_setmethods__["code"] = _mul_nbapi.ofp_error_msg_code_set
    __swig_getmethods__["code"] = _mul_nbapi.ofp_error_msg_code_get
    if _newclass:code = _swig_property(_mul_nbapi.ofp_error_msg_code_get, _mul_nbapi.ofp_error_msg_code_set)
    __swig_setmethods__["data"] = _mul_nbapi.ofp_error_msg_data_set
    __swig_getmethods__["data"] = _mul_nbapi.ofp_error_msg_data_get
    if _newclass:data = _swig_property(_mul_nbapi.ofp_error_msg_data_get, _mul_nbapi.ofp_error_msg_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_error_msg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_error_msg
    __del__ = lambda self : None;
ofp_error_msg_swigregister = _mul_nbapi.ofp_error_msg_swigregister
ofp_error_msg_swigregister(ofp_error_msg)

OFPST_DESC = _mul_nbapi.OFPST_DESC
OFPST_FLOW = _mul_nbapi.OFPST_FLOW
OFPST_AGGREGATE = _mul_nbapi.OFPST_AGGREGATE
OFPST_TABLE = _mul_nbapi.OFPST_TABLE
OFPST_PORT = _mul_nbapi.OFPST_PORT
OFPST_QUEUE = _mul_nbapi.OFPST_QUEUE
OFPST_VENDOR = _mul_nbapi.OFPST_VENDOR
class ofp_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_stats_request_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_stats_request_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_stats_request_header_get, _mul_nbapi.ofp_stats_request_header_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp_stats_request_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_stats_request_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_stats_request_type_get, _mul_nbapi.ofp_stats_request_type_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_stats_request_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_stats_request_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_stats_request_flags_get, _mul_nbapi.ofp_stats_request_flags_set)
    __swig_setmethods__["body"] = _mul_nbapi.ofp_stats_request_body_set
    __swig_getmethods__["body"] = _mul_nbapi.ofp_stats_request_body_get
    if _newclass:body = _swig_property(_mul_nbapi.ofp_stats_request_body_get, _mul_nbapi.ofp_stats_request_body_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_stats_request
    __del__ = lambda self : None;
ofp_stats_request_swigregister = _mul_nbapi.ofp_stats_request_swigregister
ofp_stats_request_swigregister(ofp_stats_request)

OFPSF_REPLY_MORE = _mul_nbapi.OFPSF_REPLY_MORE
class ofp_stats_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_stats_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_stats_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_stats_reply_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_stats_reply_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_stats_reply_header_get, _mul_nbapi.ofp_stats_reply_header_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp_stats_reply_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_stats_reply_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_stats_reply_type_get, _mul_nbapi.ofp_stats_reply_type_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_stats_reply_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_stats_reply_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_stats_reply_flags_get, _mul_nbapi.ofp_stats_reply_flags_set)
    __swig_setmethods__["body"] = _mul_nbapi.ofp_stats_reply_body_set
    __swig_getmethods__["body"] = _mul_nbapi.ofp_stats_reply_body_get
    if _newclass:body = _swig_property(_mul_nbapi.ofp_stats_reply_body_get, _mul_nbapi.ofp_stats_reply_body_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_stats_reply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_stats_reply
    __del__ = lambda self : None;
ofp_stats_reply_swigregister = _mul_nbapi.ofp_stats_reply_swigregister
ofp_stats_reply_swigregister(ofp_stats_reply)

DESC_STR_LEN = _mul_nbapi.DESC_STR_LEN
SERIAL_NUM_LEN = _mul_nbapi.SERIAL_NUM_LEN
class ofp_desc_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_desc_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_desc_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mfr_desc"] = _mul_nbapi.ofp_desc_stats_mfr_desc_set
    __swig_getmethods__["mfr_desc"] = _mul_nbapi.ofp_desc_stats_mfr_desc_get
    if _newclass:mfr_desc = _swig_property(_mul_nbapi.ofp_desc_stats_mfr_desc_get, _mul_nbapi.ofp_desc_stats_mfr_desc_set)
    __swig_setmethods__["hw_desc"] = _mul_nbapi.ofp_desc_stats_hw_desc_set
    __swig_getmethods__["hw_desc"] = _mul_nbapi.ofp_desc_stats_hw_desc_get
    if _newclass:hw_desc = _swig_property(_mul_nbapi.ofp_desc_stats_hw_desc_get, _mul_nbapi.ofp_desc_stats_hw_desc_set)
    __swig_setmethods__["sw_desc"] = _mul_nbapi.ofp_desc_stats_sw_desc_set
    __swig_getmethods__["sw_desc"] = _mul_nbapi.ofp_desc_stats_sw_desc_get
    if _newclass:sw_desc = _swig_property(_mul_nbapi.ofp_desc_stats_sw_desc_get, _mul_nbapi.ofp_desc_stats_sw_desc_set)
    __swig_setmethods__["serial_num"] = _mul_nbapi.ofp_desc_stats_serial_num_set
    __swig_getmethods__["serial_num"] = _mul_nbapi.ofp_desc_stats_serial_num_get
    if _newclass:serial_num = _swig_property(_mul_nbapi.ofp_desc_stats_serial_num_get, _mul_nbapi.ofp_desc_stats_serial_num_set)
    __swig_setmethods__["dp_desc"] = _mul_nbapi.ofp_desc_stats_dp_desc_set
    __swig_getmethods__["dp_desc"] = _mul_nbapi.ofp_desc_stats_dp_desc_get
    if _newclass:dp_desc = _swig_property(_mul_nbapi.ofp_desc_stats_dp_desc_get, _mul_nbapi.ofp_desc_stats_dp_desc_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_desc_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_desc_stats
    __del__ = lambda self : None;
ofp_desc_stats_swigregister = _mul_nbapi.ofp_desc_stats_swigregister
ofp_desc_stats_swigregister(ofp_desc_stats)

class ofp_flow_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["match"] = _mul_nbapi.ofp_flow_stats_request_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp_flow_stats_request_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp_flow_stats_request_match_get, _mul_nbapi.ofp_flow_stats_request_match_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_flow_stats_request_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_flow_stats_request_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_flow_stats_request_table_id_get, _mul_nbapi.ofp_flow_stats_request_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_flow_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_flow_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_flow_stats_request_pad_get, _mul_nbapi.ofp_flow_stats_request_pad_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp_flow_stats_request_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp_flow_stats_request_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp_flow_stats_request_out_port_get, _mul_nbapi.ofp_flow_stats_request_out_port_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_flow_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_flow_stats_request
    __del__ = lambda self : None;
ofp_flow_stats_request_swigregister = _mul_nbapi.ofp_flow_stats_request_swigregister
ofp_flow_stats_request_swigregister(ofp_flow_stats_request)

class ofp_flow_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _mul_nbapi.ofp_flow_stats_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_flow_stats_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_flow_stats_length_get, _mul_nbapi.ofp_flow_stats_length_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_flow_stats_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_flow_stats_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_flow_stats_table_id_get, _mul_nbapi.ofp_flow_stats_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_flow_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_flow_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_flow_stats_pad_get, _mul_nbapi.ofp_flow_stats_pad_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp_flow_stats_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp_flow_stats_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp_flow_stats_match_get, _mul_nbapi.ofp_flow_stats_match_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp_flow_stats_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp_flow_stats_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp_flow_stats_duration_sec_get, _mul_nbapi.ofp_flow_stats_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp_flow_stats_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp_flow_stats_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp_flow_stats_duration_nsec_get, _mul_nbapi.ofp_flow_stats_duration_nsec_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp_flow_stats_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp_flow_stats_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp_flow_stats_priority_get, _mul_nbapi.ofp_flow_stats_priority_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_stats_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_stats_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp_flow_stats_idle_timeout_get, _mul_nbapi.ofp_flow_stats_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _mul_nbapi.ofp_flow_stats_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _mul_nbapi.ofp_flow_stats_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_mul_nbapi.ofp_flow_stats_hard_timeout_get, _mul_nbapi.ofp_flow_stats_hard_timeout_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp_flow_stats_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp_flow_stats_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp_flow_stats_pad2_get, _mul_nbapi.ofp_flow_stats_pad2_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp_flow_stats_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp_flow_stats_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp_flow_stats_cookie_get, _mul_nbapi.ofp_flow_stats_cookie_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.ofp_flow_stats_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.ofp_flow_stats_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.ofp_flow_stats_packet_count_get, _mul_nbapi.ofp_flow_stats_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.ofp_flow_stats_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.ofp_flow_stats_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.ofp_flow_stats_byte_count_get, _mul_nbapi.ofp_flow_stats_byte_count_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp_flow_stats_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp_flow_stats_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp_flow_stats_actions_get, _mul_nbapi.ofp_flow_stats_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_flow_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_flow_stats
    __del__ = lambda self : None;
ofp_flow_stats_swigregister = _mul_nbapi.ofp_flow_stats_swigregister
ofp_flow_stats_swigregister(ofp_flow_stats)

class ofp_aggregate_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_aggregate_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_aggregate_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["match"] = _mul_nbapi.ofp_aggregate_stats_request_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp_aggregate_stats_request_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp_aggregate_stats_request_match_get, _mul_nbapi.ofp_aggregate_stats_request_match_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_aggregate_stats_request_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_aggregate_stats_request_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_aggregate_stats_request_table_id_get, _mul_nbapi.ofp_aggregate_stats_request_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_aggregate_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_aggregate_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_aggregate_stats_request_pad_get, _mul_nbapi.ofp_aggregate_stats_request_pad_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp_aggregate_stats_request_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp_aggregate_stats_request_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp_aggregate_stats_request_out_port_get, _mul_nbapi.ofp_aggregate_stats_request_out_port_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_aggregate_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_aggregate_stats_request
    __del__ = lambda self : None;
ofp_aggregate_stats_request_swigregister = _mul_nbapi.ofp_aggregate_stats_request_swigregister
ofp_aggregate_stats_request_swigregister(ofp_aggregate_stats_request)

class ofp_aggregate_stats_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_aggregate_stats_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_aggregate_stats_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packet_count"] = _mul_nbapi.ofp_aggregate_stats_reply_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.ofp_aggregate_stats_reply_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.ofp_aggregate_stats_reply_packet_count_get, _mul_nbapi.ofp_aggregate_stats_reply_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.ofp_aggregate_stats_reply_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.ofp_aggregate_stats_reply_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.ofp_aggregate_stats_reply_byte_count_get, _mul_nbapi.ofp_aggregate_stats_reply_byte_count_set)
    __swig_setmethods__["flow_count"] = _mul_nbapi.ofp_aggregate_stats_reply_flow_count_set
    __swig_getmethods__["flow_count"] = _mul_nbapi.ofp_aggregate_stats_reply_flow_count_get
    if _newclass:flow_count = _swig_property(_mul_nbapi.ofp_aggregate_stats_reply_flow_count_get, _mul_nbapi.ofp_aggregate_stats_reply_flow_count_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_aggregate_stats_reply_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_aggregate_stats_reply_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_aggregate_stats_reply_pad_get, _mul_nbapi.ofp_aggregate_stats_reply_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_aggregate_stats_reply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_aggregate_stats_reply
    __del__ = lambda self : None;
ofp_aggregate_stats_reply_swigregister = _mul_nbapi.ofp_aggregate_stats_reply_swigregister
ofp_aggregate_stats_reply_swigregister(ofp_aggregate_stats_reply)

class ofp_table_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_table_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_table_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_table_stats_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_table_stats_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_table_stats_table_id_get, _mul_nbapi.ofp_table_stats_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_table_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_table_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_table_stats_pad_get, _mul_nbapi.ofp_table_stats_pad_set)
    __swig_setmethods__["name"] = _mul_nbapi.ofp_table_stats_name_set
    __swig_getmethods__["name"] = _mul_nbapi.ofp_table_stats_name_get
    if _newclass:name = _swig_property(_mul_nbapi.ofp_table_stats_name_get, _mul_nbapi.ofp_table_stats_name_set)
    __swig_setmethods__["wildcards"] = _mul_nbapi.ofp_table_stats_wildcards_set
    __swig_getmethods__["wildcards"] = _mul_nbapi.ofp_table_stats_wildcards_get
    if _newclass:wildcards = _swig_property(_mul_nbapi.ofp_table_stats_wildcards_get, _mul_nbapi.ofp_table_stats_wildcards_set)
    __swig_setmethods__["max_entries"] = _mul_nbapi.ofp_table_stats_max_entries_set
    __swig_getmethods__["max_entries"] = _mul_nbapi.ofp_table_stats_max_entries_get
    if _newclass:max_entries = _swig_property(_mul_nbapi.ofp_table_stats_max_entries_get, _mul_nbapi.ofp_table_stats_max_entries_set)
    __swig_setmethods__["active_count"] = _mul_nbapi.ofp_table_stats_active_count_set
    __swig_getmethods__["active_count"] = _mul_nbapi.ofp_table_stats_active_count_get
    if _newclass:active_count = _swig_property(_mul_nbapi.ofp_table_stats_active_count_get, _mul_nbapi.ofp_table_stats_active_count_set)
    __swig_setmethods__["lookup_count"] = _mul_nbapi.ofp_table_stats_lookup_count_set
    __swig_getmethods__["lookup_count"] = _mul_nbapi.ofp_table_stats_lookup_count_get
    if _newclass:lookup_count = _swig_property(_mul_nbapi.ofp_table_stats_lookup_count_get, _mul_nbapi.ofp_table_stats_lookup_count_set)
    __swig_setmethods__["matched_count"] = _mul_nbapi.ofp_table_stats_matched_count_set
    __swig_getmethods__["matched_count"] = _mul_nbapi.ofp_table_stats_matched_count_get
    if _newclass:matched_count = _swig_property(_mul_nbapi.ofp_table_stats_matched_count_get, _mul_nbapi.ofp_table_stats_matched_count_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_table_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_table_stats
    __del__ = lambda self : None;
ofp_table_stats_swigregister = _mul_nbapi.ofp_table_stats_swigregister
ofp_table_stats_swigregister(ofp_table_stats)

class ofp_port_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp_port_stats_request_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp_port_stats_request_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp_port_stats_request_port_no_get, _mul_nbapi.ofp_port_stats_request_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_port_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_port_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_port_stats_request_pad_get, _mul_nbapi.ofp_port_stats_request_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_stats_request
    __del__ = lambda self : None;
ofp_port_stats_request_swigregister = _mul_nbapi.ofp_port_stats_request_swigregister
ofp_port_stats_request_swigregister(ofp_port_stats_request)

class ofp_port_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp_port_stats_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp_port_stats_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp_port_stats_port_no_get, _mul_nbapi.ofp_port_stats_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_port_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_port_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_port_stats_pad_get, _mul_nbapi.ofp_port_stats_pad_set)
    __swig_setmethods__["rx_packets"] = _mul_nbapi.ofp_port_stats_rx_packets_set
    __swig_getmethods__["rx_packets"] = _mul_nbapi.ofp_port_stats_rx_packets_get
    if _newclass:rx_packets = _swig_property(_mul_nbapi.ofp_port_stats_rx_packets_get, _mul_nbapi.ofp_port_stats_rx_packets_set)
    __swig_setmethods__["tx_packets"] = _mul_nbapi.ofp_port_stats_tx_packets_set
    __swig_getmethods__["tx_packets"] = _mul_nbapi.ofp_port_stats_tx_packets_get
    if _newclass:tx_packets = _swig_property(_mul_nbapi.ofp_port_stats_tx_packets_get, _mul_nbapi.ofp_port_stats_tx_packets_set)
    __swig_setmethods__["rx_bytes"] = _mul_nbapi.ofp_port_stats_rx_bytes_set
    __swig_getmethods__["rx_bytes"] = _mul_nbapi.ofp_port_stats_rx_bytes_get
    if _newclass:rx_bytes = _swig_property(_mul_nbapi.ofp_port_stats_rx_bytes_get, _mul_nbapi.ofp_port_stats_rx_bytes_set)
    __swig_setmethods__["tx_bytes"] = _mul_nbapi.ofp_port_stats_tx_bytes_set
    __swig_getmethods__["tx_bytes"] = _mul_nbapi.ofp_port_stats_tx_bytes_get
    if _newclass:tx_bytes = _swig_property(_mul_nbapi.ofp_port_stats_tx_bytes_get, _mul_nbapi.ofp_port_stats_tx_bytes_set)
    __swig_setmethods__["rx_dropped"] = _mul_nbapi.ofp_port_stats_rx_dropped_set
    __swig_getmethods__["rx_dropped"] = _mul_nbapi.ofp_port_stats_rx_dropped_get
    if _newclass:rx_dropped = _swig_property(_mul_nbapi.ofp_port_stats_rx_dropped_get, _mul_nbapi.ofp_port_stats_rx_dropped_set)
    __swig_setmethods__["tx_dropped"] = _mul_nbapi.ofp_port_stats_tx_dropped_set
    __swig_getmethods__["tx_dropped"] = _mul_nbapi.ofp_port_stats_tx_dropped_get
    if _newclass:tx_dropped = _swig_property(_mul_nbapi.ofp_port_stats_tx_dropped_get, _mul_nbapi.ofp_port_stats_tx_dropped_set)
    __swig_setmethods__["rx_errors"] = _mul_nbapi.ofp_port_stats_rx_errors_set
    __swig_getmethods__["rx_errors"] = _mul_nbapi.ofp_port_stats_rx_errors_get
    if _newclass:rx_errors = _swig_property(_mul_nbapi.ofp_port_stats_rx_errors_get, _mul_nbapi.ofp_port_stats_rx_errors_set)
    __swig_setmethods__["tx_errors"] = _mul_nbapi.ofp_port_stats_tx_errors_set
    __swig_getmethods__["tx_errors"] = _mul_nbapi.ofp_port_stats_tx_errors_get
    if _newclass:tx_errors = _swig_property(_mul_nbapi.ofp_port_stats_tx_errors_get, _mul_nbapi.ofp_port_stats_tx_errors_set)
    __swig_setmethods__["rx_frame_err"] = _mul_nbapi.ofp_port_stats_rx_frame_err_set
    __swig_getmethods__["rx_frame_err"] = _mul_nbapi.ofp_port_stats_rx_frame_err_get
    if _newclass:rx_frame_err = _swig_property(_mul_nbapi.ofp_port_stats_rx_frame_err_get, _mul_nbapi.ofp_port_stats_rx_frame_err_set)
    __swig_setmethods__["rx_over_err"] = _mul_nbapi.ofp_port_stats_rx_over_err_set
    __swig_getmethods__["rx_over_err"] = _mul_nbapi.ofp_port_stats_rx_over_err_get
    if _newclass:rx_over_err = _swig_property(_mul_nbapi.ofp_port_stats_rx_over_err_get, _mul_nbapi.ofp_port_stats_rx_over_err_set)
    __swig_setmethods__["rx_crc_err"] = _mul_nbapi.ofp_port_stats_rx_crc_err_set
    __swig_getmethods__["rx_crc_err"] = _mul_nbapi.ofp_port_stats_rx_crc_err_get
    if _newclass:rx_crc_err = _swig_property(_mul_nbapi.ofp_port_stats_rx_crc_err_get, _mul_nbapi.ofp_port_stats_rx_crc_err_set)
    __swig_setmethods__["collisions"] = _mul_nbapi.ofp_port_stats_collisions_set
    __swig_getmethods__["collisions"] = _mul_nbapi.ofp_port_stats_collisions_get
    if _newclass:collisions = _swig_property(_mul_nbapi.ofp_port_stats_collisions_get, _mul_nbapi.ofp_port_stats_collisions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_stats
    __del__ = lambda self : None;
ofp_port_stats_swigregister = _mul_nbapi.ofp_port_stats_swigregister
ofp_port_stats_swigregister(ofp_port_stats)

class ofp_vendor_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_vendor_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_vendor_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_vendor_header_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_vendor_header_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_vendor_header_header_get, _mul_nbapi.ofp_vendor_header_header_set)
    __swig_setmethods__["vendor"] = _mul_nbapi.ofp_vendor_header_vendor_set
    __swig_getmethods__["vendor"] = _mul_nbapi.ofp_vendor_header_vendor_get
    if _newclass:vendor = _swig_property(_mul_nbapi.ofp_vendor_header_vendor_get, _mul_nbapi.ofp_vendor_header_vendor_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_vendor_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_vendor_header
    __del__ = lambda self : None;
ofp_vendor_header_swigregister = _mul_nbapi.ofp_vendor_header_swigregister
ofp_vendor_header_swigregister(ofp_vendor_header)

OFPQ_ALL = _mul_nbapi.OFPQ_ALL
OFPQ_MIN_RATE_UNCFG = _mul_nbapi.OFPQ_MIN_RATE_UNCFG
OFPQT_NONE = _mul_nbapi.OFPQT_NONE
OFPQT_MIN_RATE = _mul_nbapi.OFPQT_MIN_RATE
class ofp_queue_prop_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_prop_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_prop_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["property"] = _mul_nbapi.ofp_queue_prop_header_property_set
    __swig_getmethods__["property"] = _mul_nbapi.ofp_queue_prop_header_property_get
    if _newclass:property = _swig_property(_mul_nbapi.ofp_queue_prop_header_property_get, _mul_nbapi.ofp_queue_prop_header_property_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_queue_prop_header_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_queue_prop_header_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_queue_prop_header_len_get, _mul_nbapi.ofp_queue_prop_header_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_prop_header_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_prop_header_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_prop_header_pad_get, _mul_nbapi.ofp_queue_prop_header_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_prop_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_prop_header
    __del__ = lambda self : None;
ofp_queue_prop_header_swigregister = _mul_nbapi.ofp_queue_prop_header_swigregister
ofp_queue_prop_header_swigregister(ofp_queue_prop_header)

class ofp_queue_prop_min_rate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_prop_min_rate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_prop_min_rate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prop_header"] = _mul_nbapi.ofp_queue_prop_min_rate_prop_header_set
    __swig_getmethods__["prop_header"] = _mul_nbapi.ofp_queue_prop_min_rate_prop_header_get
    if _newclass:prop_header = _swig_property(_mul_nbapi.ofp_queue_prop_min_rate_prop_header_get, _mul_nbapi.ofp_queue_prop_min_rate_prop_header_set)
    __swig_setmethods__["rate"] = _mul_nbapi.ofp_queue_prop_min_rate_rate_set
    __swig_getmethods__["rate"] = _mul_nbapi.ofp_queue_prop_min_rate_rate_get
    if _newclass:rate = _swig_property(_mul_nbapi.ofp_queue_prop_min_rate_rate_get, _mul_nbapi.ofp_queue_prop_min_rate_rate_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_prop_min_rate_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_prop_min_rate_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_prop_min_rate_pad_get, _mul_nbapi.ofp_queue_prop_min_rate_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_prop_min_rate()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_prop_min_rate
    __del__ = lambda self : None;
ofp_queue_prop_min_rate_swigregister = _mul_nbapi.ofp_queue_prop_min_rate_swigregister
ofp_queue_prop_min_rate_swigregister(ofp_queue_prop_min_rate)

class ofp_packet_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_packet_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_packet_queue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp_packet_queue_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp_packet_queue_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp_packet_queue_queue_id_get, _mul_nbapi.ofp_packet_queue_queue_id_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_packet_queue_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_packet_queue_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_packet_queue_len_get, _mul_nbapi.ofp_packet_queue_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_packet_queue_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_packet_queue_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_packet_queue_pad_get, _mul_nbapi.ofp_packet_queue_pad_set)
    __swig_setmethods__["properties"] = _mul_nbapi.ofp_packet_queue_properties_set
    __swig_getmethods__["properties"] = _mul_nbapi.ofp_packet_queue_properties_get
    if _newclass:properties = _swig_property(_mul_nbapi.ofp_packet_queue_properties_get, _mul_nbapi.ofp_packet_queue_properties_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_packet_queue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_packet_queue
    __del__ = lambda self : None;
ofp_packet_queue_swigregister = _mul_nbapi.ofp_packet_queue_swigregister
ofp_packet_queue_swigregister(ofp_packet_queue)

class ofp_queue_get_config_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_get_config_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_get_config_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_queue_get_config_request_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_queue_get_config_request_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_queue_get_config_request_header_get, _mul_nbapi.ofp_queue_get_config_request_header_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp_queue_get_config_request_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp_queue_get_config_request_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp_queue_get_config_request_port_get, _mul_nbapi.ofp_queue_get_config_request_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_get_config_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_get_config_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_get_config_request_pad_get, _mul_nbapi.ofp_queue_get_config_request_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_get_config_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_get_config_request
    __del__ = lambda self : None;
ofp_queue_get_config_request_swigregister = _mul_nbapi.ofp_queue_get_config_request_swigregister
ofp_queue_get_config_request_swigregister(ofp_queue_get_config_request)

class ofp_queue_get_config_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_get_config_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_get_config_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_queue_get_config_reply_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_queue_get_config_reply_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_queue_get_config_reply_header_get, _mul_nbapi.ofp_queue_get_config_reply_header_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp_queue_get_config_reply_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp_queue_get_config_reply_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp_queue_get_config_reply_port_get, _mul_nbapi.ofp_queue_get_config_reply_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_get_config_reply_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_get_config_reply_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_get_config_reply_pad_get, _mul_nbapi.ofp_queue_get_config_reply_pad_set)
    __swig_setmethods__["queues"] = _mul_nbapi.ofp_queue_get_config_reply_queues_set
    __swig_getmethods__["queues"] = _mul_nbapi.ofp_queue_get_config_reply_queues_get
    if _newclass:queues = _swig_property(_mul_nbapi.ofp_queue_get_config_reply_queues_get, _mul_nbapi.ofp_queue_get_config_reply_queues_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_get_config_reply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_get_config_reply
    __del__ = lambda self : None;
ofp_queue_get_config_reply_swigregister = _mul_nbapi.ofp_queue_get_config_reply_swigregister
ofp_queue_get_config_reply_swigregister(ofp_queue_get_config_reply)

class ofp_action_enqueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_enqueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_enqueue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_enqueue_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_enqueue_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_enqueue_type_get, _mul_nbapi.ofp_action_enqueue_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_enqueue_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_enqueue_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_enqueue_len_get, _mul_nbapi.ofp_action_enqueue_len_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp_action_enqueue_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp_action_enqueue_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp_action_enqueue_port_get, _mul_nbapi.ofp_action_enqueue_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_enqueue_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_enqueue_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_enqueue_pad_get, _mul_nbapi.ofp_action_enqueue_pad_set)
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp_action_enqueue_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp_action_enqueue_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp_action_enqueue_queue_id_get, _mul_nbapi.ofp_action_enqueue_queue_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_enqueue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_enqueue
    __del__ = lambda self : None;
ofp_action_enqueue_swigregister = _mul_nbapi.ofp_action_enqueue_swigregister
ofp_action_enqueue_swigregister(ofp_action_enqueue)

class ofp_queue_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp_queue_stats_request_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp_queue_stats_request_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp_queue_stats_request_port_no_get, _mul_nbapi.ofp_queue_stats_request_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_stats_request_pad_get, _mul_nbapi.ofp_queue_stats_request_pad_set)
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp_queue_stats_request_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp_queue_stats_request_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp_queue_stats_request_queue_id_get, _mul_nbapi.ofp_queue_stats_request_queue_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_stats_request
    __del__ = lambda self : None;
ofp_queue_stats_request_swigregister = _mul_nbapi.ofp_queue_stats_request_swigregister
ofp_queue_stats_request_swigregister(ofp_queue_stats_request)

class ofp_queue_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp_queue_stats_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp_queue_stats_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp_queue_stats_port_no_get, _mul_nbapi.ofp_queue_stats_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_stats_pad_get, _mul_nbapi.ofp_queue_stats_pad_set)
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp_queue_stats_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp_queue_stats_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp_queue_stats_queue_id_get, _mul_nbapi.ofp_queue_stats_queue_id_set)
    __swig_setmethods__["tx_bytes"] = _mul_nbapi.ofp_queue_stats_tx_bytes_set
    __swig_getmethods__["tx_bytes"] = _mul_nbapi.ofp_queue_stats_tx_bytes_get
    if _newclass:tx_bytes = _swig_property(_mul_nbapi.ofp_queue_stats_tx_bytes_get, _mul_nbapi.ofp_queue_stats_tx_bytes_set)
    __swig_setmethods__["tx_packets"] = _mul_nbapi.ofp_queue_stats_tx_packets_set
    __swig_getmethods__["tx_packets"] = _mul_nbapi.ofp_queue_stats_tx_packets_get
    if _newclass:tx_packets = _swig_property(_mul_nbapi.ofp_queue_stats_tx_packets_get, _mul_nbapi.ofp_queue_stats_tx_packets_set)
    __swig_setmethods__["tx_errors"] = _mul_nbapi.ofp_queue_stats_tx_errors_set
    __swig_getmethods__["tx_errors"] = _mul_nbapi.ofp_queue_stats_tx_errors_get
    if _newclass:tx_errors = _swig_property(_mul_nbapi.ofp_queue_stats_tx_errors_get, _mul_nbapi.ofp_queue_stats_tx_errors_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_stats
    __del__ = lambda self : None;
ofp_queue_stats_swigregister = _mul_nbapi.ofp_queue_stats_swigregister
ofp_queue_stats_swigregister(ofp_queue_stats)

C_DP_REG = _mul_nbapi.C_DP_REG
C_DP_UNREG = _mul_nbapi.C_DP_UNREG
C_PACKET_IN = _mul_nbapi.C_PACKET_IN
C_PORT_CHANGE = _mul_nbapi.C_PORT_CHANGE
C_FLOW_REMOVED = _mul_nbapi.C_FLOW_REMOVED
C_FLOW_MOD_FAILED = _mul_nbapi.C_FLOW_MOD_FAILED
C_EVENT_MAX = _mul_nbapi.C_EVENT_MAX
C_OFP_VERSION = _mul_nbapi.C_OFP_VERSION
C_OFPT_BASE = _mul_nbapi.C_OFPT_BASE
C_OFPT_SWITCH_DELETE = _mul_nbapi.C_OFPT_SWITCH_DELETE
C_OFPT_REG_APP = _mul_nbapi.C_OFPT_REG_APP
C_OFPT_UNREG_APP = _mul_nbapi.C_OFPT_UNREG_APP
C_OFPT_RECONN_APP = _mul_nbapi.C_OFPT_RECONN_APP
C_OFPT_NOCONN_APP = _mul_nbapi.C_OFPT_NOCONN_APP
C_OFPT_SET_FPOPS = _mul_nbapi.C_OFPT_SET_FPOPS
C_OFPT_AUX_CMD = _mul_nbapi.C_OFPT_AUX_CMD
class c_ofp_switch_delete(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_delete, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_delete, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_switch_delete_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_switch_delete_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_switch_delete_header_get, _mul_nbapi.c_ofp_switch_delete_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_delete_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_delete_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_switch_delete_datapath_id_get, _mul_nbapi.c_ofp_switch_delete_datapath_id_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.c_ofp_switch_delete_sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.c_ofp_switch_delete_sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.c_ofp_switch_delete_sw_alias_get, _mul_nbapi.c_ofp_switch_delete_sw_alias_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_switch_delete_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_switch_delete_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_switch_delete_pad_get, _mul_nbapi.c_ofp_switch_delete_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_delete()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_delete
    __del__ = lambda self : None;
c_ofp_switch_delete_swigregister = _mul_nbapi.c_ofp_switch_delete_swigregister
c_ofp_switch_delete_swigregister(c_ofp_switch_delete)
cvar = _mul_nbapi.cvar

class c_ofp_port_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_port_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_port_status, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_port_status_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_port_status_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_port_status_header_get, _mul_nbapi.c_ofp_port_status_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_port_status_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_port_status_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_port_status_datapath_id_get, _mul_nbapi.c_ofp_port_status_datapath_id_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.c_ofp_port_status_sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.c_ofp_port_status_sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.c_ofp_port_status_sw_alias_get, _mul_nbapi.c_ofp_port_status_sw_alias_set)
    __swig_setmethods__["config_mask"] = _mul_nbapi.c_ofp_port_status_config_mask_set
    __swig_getmethods__["config_mask"] = _mul_nbapi.c_ofp_port_status_config_mask_get
    if _newclass:config_mask = _swig_property(_mul_nbapi.c_ofp_port_status_config_mask_get, _mul_nbapi.c_ofp_port_status_config_mask_set)
    __swig_setmethods__["state_mask"] = _mul_nbapi.c_ofp_port_status_state_mask_set
    __swig_getmethods__["state_mask"] = _mul_nbapi.c_ofp_port_status_state_mask_get
    if _newclass:state_mask = _swig_property(_mul_nbapi.c_ofp_port_status_state_mask_get, _mul_nbapi.c_ofp_port_status_state_mask_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_port_status_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_port_status_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_port_status_pad_get, _mul_nbapi.c_ofp_port_status_pad_set)
    __swig_setmethods__["reason"] = _mul_nbapi.c_ofp_port_status_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.c_ofp_port_status_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.c_ofp_port_status_reason_get, _mul_nbapi.c_ofp_port_status_reason_set)
    __swig_setmethods__["pad1"] = _mul_nbapi.c_ofp_port_status_pad1_set
    __swig_getmethods__["pad1"] = _mul_nbapi.c_ofp_port_status_pad1_get
    if _newclass:pad1 = _swig_property(_mul_nbapi.c_ofp_port_status_pad1_get, _mul_nbapi.c_ofp_port_status_pad1_set)
    __swig_setmethods__["desc"] = _mul_nbapi.c_ofp_port_status_desc_set
    __swig_getmethods__["desc"] = _mul_nbapi.c_ofp_port_status_desc_get
    if _newclass:desc = _swig_property(_mul_nbapi.c_ofp_port_status_desc_get, _mul_nbapi.c_ofp_port_status_desc_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_port_status()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_port_status
    __del__ = lambda self : None;
c_ofp_port_status_swigregister = _mul_nbapi.c_ofp_port_status_swigregister
c_ofp_port_status_swigregister(c_ofp_port_status)

class flow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nw_src"] = _mul_nbapi.flow_nw_src_set
    __swig_getmethods__["nw_src"] = _mul_nbapi.flow_nw_src_get
    if _newclass:nw_src = _swig_property(_mul_nbapi.flow_nw_src_get, _mul_nbapi.flow_nw_src_set)
    __swig_setmethods__["nw_dst"] = _mul_nbapi.flow_nw_dst_set
    __swig_getmethods__["nw_dst"] = _mul_nbapi.flow_nw_dst_get
    if _newclass:nw_dst = _swig_property(_mul_nbapi.flow_nw_dst_get, _mul_nbapi.flow_nw_dst_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.flow_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.flow_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.flow_in_port_get, _mul_nbapi.flow_in_port_set)
    __swig_setmethods__["dl_vlan"] = _mul_nbapi.flow_dl_vlan_set
    __swig_getmethods__["dl_vlan"] = _mul_nbapi.flow_dl_vlan_get
    if _newclass:dl_vlan = _swig_property(_mul_nbapi.flow_dl_vlan_get, _mul_nbapi.flow_dl_vlan_set)
    __swig_setmethods__["dl_type"] = _mul_nbapi.flow_dl_type_set
    __swig_getmethods__["dl_type"] = _mul_nbapi.flow_dl_type_get
    if _newclass:dl_type = _swig_property(_mul_nbapi.flow_dl_type_get, _mul_nbapi.flow_dl_type_set)
    __swig_setmethods__["tp_src"] = _mul_nbapi.flow_tp_src_set
    __swig_getmethods__["tp_src"] = _mul_nbapi.flow_tp_src_get
    if _newclass:tp_src = _swig_property(_mul_nbapi.flow_tp_src_get, _mul_nbapi.flow_tp_src_set)
    __swig_setmethods__["tp_dst"] = _mul_nbapi.flow_tp_dst_set
    __swig_getmethods__["tp_dst"] = _mul_nbapi.flow_tp_dst_get
    if _newclass:tp_dst = _swig_property(_mul_nbapi.flow_tp_dst_get, _mul_nbapi.flow_tp_dst_set)
    __swig_setmethods__["dl_src"] = _mul_nbapi.flow_dl_src_set
    __swig_getmethods__["dl_src"] = _mul_nbapi.flow_dl_src_get
    if _newclass:dl_src = _swig_property(_mul_nbapi.flow_dl_src_get, _mul_nbapi.flow_dl_src_set)
    __swig_setmethods__["dl_dst"] = _mul_nbapi.flow_dl_dst_set
    __swig_getmethods__["dl_dst"] = _mul_nbapi.flow_dl_dst_get
    if _newclass:dl_dst = _swig_property(_mul_nbapi.flow_dl_dst_get, _mul_nbapi.flow_dl_dst_set)
    __swig_setmethods__["dl_vlan_pcp"] = _mul_nbapi.flow_dl_vlan_pcp_set
    __swig_getmethods__["dl_vlan_pcp"] = _mul_nbapi.flow_dl_vlan_pcp_get
    if _newclass:dl_vlan_pcp = _swig_property(_mul_nbapi.flow_dl_vlan_pcp_get, _mul_nbapi.flow_dl_vlan_pcp_set)
    __swig_setmethods__["nw_tos"] = _mul_nbapi.flow_nw_tos_set
    __swig_getmethods__["nw_tos"] = _mul_nbapi.flow_nw_tos_get
    if _newclass:nw_tos = _swig_property(_mul_nbapi.flow_nw_tos_get, _mul_nbapi.flow_nw_tos_set)
    __swig_setmethods__["nw_proto"] = _mul_nbapi.flow_nw_proto_set
    __swig_getmethods__["nw_proto"] = _mul_nbapi.flow_nw_proto_get
    if _newclass:nw_proto = _swig_property(_mul_nbapi.flow_nw_proto_get, _mul_nbapi.flow_nw_proto_set)
    __swig_setmethods__["pad"] = _mul_nbapi.flow_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.flow_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.flow_pad_get, _mul_nbapi.flow_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_flow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_flow
    __del__ = lambda self : None;
flow_swigregister = _mul_nbapi.flow_swigregister
flow_swigregister(flow)

class c_ofp_packet_in(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_packet_in, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_packet_in, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_packet_in_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_packet_in_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_packet_in_header_get, _mul_nbapi.c_ofp_packet_in_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_packet_in_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_packet_in_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_packet_in_datapath_id_get, _mul_nbapi.c_ofp_packet_in_datapath_id_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.c_ofp_packet_in_sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.c_ofp_packet_in_sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.c_ofp_packet_in_sw_alias_get, _mul_nbapi.c_ofp_packet_in_sw_alias_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_packet_in_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_packet_in_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_packet_in_pad_get, _mul_nbapi.c_ofp_packet_in_pad_set)
    __swig_setmethods__["fl"] = _mul_nbapi.c_ofp_packet_in_fl_set
    __swig_getmethods__["fl"] = _mul_nbapi.c_ofp_packet_in_fl_get
    if _newclass:fl = _swig_property(_mul_nbapi.c_ofp_packet_in_fl_get, _mul_nbapi.c_ofp_packet_in_fl_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.c_ofp_packet_in_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.c_ofp_packet_in_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.c_ofp_packet_in_buffer_id_get, _mul_nbapi.c_ofp_packet_in_buffer_id_set)
    __swig_setmethods__["total_len"] = _mul_nbapi.c_ofp_packet_in_total_len_set
    __swig_getmethods__["total_len"] = _mul_nbapi.c_ofp_packet_in_total_len_get
    if _newclass:total_len = _swig_property(_mul_nbapi.c_ofp_packet_in_total_len_get, _mul_nbapi.c_ofp_packet_in_total_len_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.c_ofp_packet_in_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.c_ofp_packet_in_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.c_ofp_packet_in_in_port_get, _mul_nbapi.c_ofp_packet_in_in_port_set)
    __swig_setmethods__["reason"] = _mul_nbapi.c_ofp_packet_in_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.c_ofp_packet_in_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.c_ofp_packet_in_reason_get, _mul_nbapi.c_ofp_packet_in_reason_set)
    __swig_setmethods__["pad1"] = _mul_nbapi.c_ofp_packet_in_pad1_set
    __swig_getmethods__["pad1"] = _mul_nbapi.c_ofp_packet_in_pad1_get
    if _newclass:pad1 = _swig_property(_mul_nbapi.c_ofp_packet_in_pad1_get, _mul_nbapi.c_ofp_packet_in_pad1_set)
    __swig_setmethods__["data"] = _mul_nbapi.c_ofp_packet_in_data_set
    __swig_getmethods__["data"] = _mul_nbapi.c_ofp_packet_in_data_get
    if _newclass:data = _swig_property(_mul_nbapi.c_ofp_packet_in_data_get, _mul_nbapi.c_ofp_packet_in_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_packet_in()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_packet_in
    __del__ = lambda self : None;
c_ofp_packet_in_swigregister = _mul_nbapi.c_ofp_packet_in_swigregister
c_ofp_packet_in_swigregister(c_ofp_packet_in)

class c_ofp_flow_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_flow_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_flow_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_flow_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_flow_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_flow_mod_header_get, _mul_nbapi.c_ofp_flow_mod_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_flow_mod_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_flow_mod_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_flow_mod_datapath_id_get, _mul_nbapi.c_ofp_flow_mod_datapath_id_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.c_ofp_flow_mod_sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.c_ofp_flow_mod_sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.c_ofp_flow_mod_sw_alias_get, _mul_nbapi.c_ofp_flow_mod_sw_alias_set)
    __swig_setmethods__["flow"] = _mul_nbapi.c_ofp_flow_mod_flow_set
    __swig_getmethods__["flow"] = _mul_nbapi.c_ofp_flow_mod_flow_get
    if _newclass:flow = _swig_property(_mul_nbapi.c_ofp_flow_mod_flow_get, _mul_nbapi.c_ofp_flow_mod_flow_set)
    __swig_setmethods__["flags"] = _mul_nbapi.c_ofp_flow_mod_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.c_ofp_flow_mod_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.c_ofp_flow_mod_flags_get, _mul_nbapi.c_ofp_flow_mod_flags_set)
    __swig_setmethods__["command"] = _mul_nbapi.c_ofp_flow_mod_command_set
    __swig_getmethods__["command"] = _mul_nbapi.c_ofp_flow_mod_command_get
    if _newclass:command = _swig_property(_mul_nbapi.c_ofp_flow_mod_command_get, _mul_nbapi.c_ofp_flow_mod_command_set)
    __swig_setmethods__["priority"] = _mul_nbapi.c_ofp_flow_mod_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.c_ofp_flow_mod_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.c_ofp_flow_mod_priority_get, _mul_nbapi.c_ofp_flow_mod_priority_set)
    __swig_setmethods__["wildcards"] = _mul_nbapi.c_ofp_flow_mod_wildcards_set
    __swig_getmethods__["wildcards"] = _mul_nbapi.c_ofp_flow_mod_wildcards_get
    if _newclass:wildcards = _swig_property(_mul_nbapi.c_ofp_flow_mod_wildcards_get, _mul_nbapi.c_ofp_flow_mod_wildcards_set)
    __swig_setmethods__["itimeo"] = _mul_nbapi.c_ofp_flow_mod_itimeo_set
    __swig_getmethods__["itimeo"] = _mul_nbapi.c_ofp_flow_mod_itimeo_get
    if _newclass:itimeo = _swig_property(_mul_nbapi.c_ofp_flow_mod_itimeo_get, _mul_nbapi.c_ofp_flow_mod_itimeo_set)
    __swig_setmethods__["htimeo"] = _mul_nbapi.c_ofp_flow_mod_htimeo_set
    __swig_getmethods__["htimeo"] = _mul_nbapi.c_ofp_flow_mod_htimeo_get
    if _newclass:htimeo = _swig_property(_mul_nbapi.c_ofp_flow_mod_htimeo_get, _mul_nbapi.c_ofp_flow_mod_htimeo_set)
    __swig_setmethods__["mod_flags"] = _mul_nbapi.c_ofp_flow_mod_mod_flags_set
    __swig_getmethods__["mod_flags"] = _mul_nbapi.c_ofp_flow_mod_mod_flags_get
    if _newclass:mod_flags = _swig_property(_mul_nbapi.c_ofp_flow_mod_mod_flags_get, _mul_nbapi.c_ofp_flow_mod_mod_flags_set)
    __swig_setmethods__["oport"] = _mul_nbapi.c_ofp_flow_mod_oport_set
    __swig_getmethods__["oport"] = _mul_nbapi.c_ofp_flow_mod_oport_get
    if _newclass:oport = _swig_property(_mul_nbapi.c_ofp_flow_mod_oport_get, _mul_nbapi.c_ofp_flow_mod_oport_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.c_ofp_flow_mod_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.c_ofp_flow_mod_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.c_ofp_flow_mod_buffer_id_get, _mul_nbapi.c_ofp_flow_mod_buffer_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_flow_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_flow_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_flow_mod_pad_get, _mul_nbapi.c_ofp_flow_mod_pad_set)
    __swig_setmethods__["actions"] = _mul_nbapi.c_ofp_flow_mod_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.c_ofp_flow_mod_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.c_ofp_flow_mod_actions_get, _mul_nbapi.c_ofp_flow_mod_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_flow_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_flow_mod
    __del__ = lambda self : None;
c_ofp_flow_mod_swigregister = _mul_nbapi.c_ofp_flow_mod_swigregister
c_ofp_flow_mod_swigregister(c_ofp_flow_mod)
C_FL_ENT_STATIC = _mul_nbapi.C_FL_ENT_STATIC
C_FL_ENT_CLONE = _mul_nbapi.C_FL_ENT_CLONE
C_FL_ENT_LOCAL = _mul_nbapi.C_FL_ENT_LOCAL
C_FL_ENT_NOCACHE = _mul_nbapi.C_FL_ENT_NOCACHE
C_FL_ENT_NOSYNC = _mul_nbapi.C_FL_ENT_NOSYNC
C_FL_ENT_GSTATS = _mul_nbapi.C_FL_ENT_GSTATS
C_FL_ENT_SWALIAS = _mul_nbapi.C_FL_ENT_SWALIAS
C_OFPC_ADD = _mul_nbapi.C_OFPC_ADD
C_OFPC_DEL = _mul_nbapi.C_OFPC_DEL
C_FL_PRIO_DFL = _mul_nbapi.C_FL_PRIO_DFL
C_FL_PRIO_FWD = _mul_nbapi.C_FL_PRIO_FWD
C_FL_PRIO_DRP = _mul_nbapi.C_FL_PRIO_DRP
C_FL_PRIO_EXM = _mul_nbapi.C_FL_PRIO_EXM

class c_ofp_flow_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_flow_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_flow_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_flow_info_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_flow_info_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_flow_info_header_get, _mul_nbapi.c_ofp_flow_info_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_flow_info_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_flow_info_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_flow_info_datapath_id_get, _mul_nbapi.c_ofp_flow_info_datapath_id_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.c_ofp_flow_info_sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.c_ofp_flow_info_sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.c_ofp_flow_info_sw_alias_get, _mul_nbapi.c_ofp_flow_info_sw_alias_set)
    __swig_setmethods__["flow"] = _mul_nbapi.c_ofp_flow_info_flow_set
    __swig_getmethods__["flow"] = _mul_nbapi.c_ofp_flow_info_flow_get
    if _newclass:flow = _swig_property(_mul_nbapi.c_ofp_flow_info_flow_get, _mul_nbapi.c_ofp_flow_info_flow_set)
    __swig_setmethods__["flags"] = _mul_nbapi.c_ofp_flow_info_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.c_ofp_flow_info_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.c_ofp_flow_info_flags_get, _mul_nbapi.c_ofp_flow_info_flags_set)
    __swig_setmethods__["command"] = _mul_nbapi.c_ofp_flow_info_command_set
    __swig_getmethods__["command"] = _mul_nbapi.c_ofp_flow_info_command_get
    if _newclass:command = _swig_property(_mul_nbapi.c_ofp_flow_info_command_get, _mul_nbapi.c_ofp_flow_info_command_set)
    __swig_setmethods__["priority"] = _mul_nbapi.c_ofp_flow_info_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.c_ofp_flow_info_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.c_ofp_flow_info_priority_get, _mul_nbapi.c_ofp_flow_info_priority_set)
    __swig_setmethods__["wildcards"] = _mul_nbapi.c_ofp_flow_info_wildcards_set
    __swig_getmethods__["wildcards"] = _mul_nbapi.c_ofp_flow_info_wildcards_get
    if _newclass:wildcards = _swig_property(_mul_nbapi.c_ofp_flow_info_wildcards_get, _mul_nbapi.c_ofp_flow_info_wildcards_set)
    __swig_setmethods__["itimeo"] = _mul_nbapi.c_ofp_flow_info_itimeo_set
    __swig_getmethods__["itimeo"] = _mul_nbapi.c_ofp_flow_info_itimeo_get
    if _newclass:itimeo = _swig_property(_mul_nbapi.c_ofp_flow_info_itimeo_get, _mul_nbapi.c_ofp_flow_info_itimeo_set)
    __swig_setmethods__["htimeo"] = _mul_nbapi.c_ofp_flow_info_htimeo_set
    __swig_getmethods__["htimeo"] = _mul_nbapi.c_ofp_flow_info_htimeo_get
    if _newclass:htimeo = _swig_property(_mul_nbapi.c_ofp_flow_info_htimeo_get, _mul_nbapi.c_ofp_flow_info_htimeo_set)
    __swig_setmethods__["mod_flags"] = _mul_nbapi.c_ofp_flow_info_mod_flags_set
    __swig_getmethods__["mod_flags"] = _mul_nbapi.c_ofp_flow_info_mod_flags_get
    if _newclass:mod_flags = _swig_property(_mul_nbapi.c_ofp_flow_info_mod_flags_get, _mul_nbapi.c_ofp_flow_info_mod_flags_set)
    __swig_setmethods__["oport"] = _mul_nbapi.c_ofp_flow_info_oport_set
    __swig_getmethods__["oport"] = _mul_nbapi.c_ofp_flow_info_oport_get
    if _newclass:oport = _swig_property(_mul_nbapi.c_ofp_flow_info_oport_get, _mul_nbapi.c_ofp_flow_info_oport_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.c_ofp_flow_info_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.c_ofp_flow_info_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.c_ofp_flow_info_buffer_id_get, _mul_nbapi.c_ofp_flow_info_buffer_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_flow_info_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_flow_info_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_flow_info_pad_get, _mul_nbapi.c_ofp_flow_info_pad_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.c_ofp_flow_info_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.c_ofp_flow_info_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.c_ofp_flow_info_byte_count_get, _mul_nbapi.c_ofp_flow_info_byte_count_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.c_ofp_flow_info_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.c_ofp_flow_info_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.c_ofp_flow_info_packet_count_get, _mul_nbapi.c_ofp_flow_info_packet_count_set)
    __swig_setmethods__["bps"] = _mul_nbapi.c_ofp_flow_info_bps_set
    __swig_getmethods__["bps"] = _mul_nbapi.c_ofp_flow_info_bps_get
    if _newclass:bps = _swig_property(_mul_nbapi.c_ofp_flow_info_bps_get, _mul_nbapi.c_ofp_flow_info_bps_set)
    __swig_setmethods__["pps"] = _mul_nbapi.c_ofp_flow_info_pps_set
    __swig_getmethods__["pps"] = _mul_nbapi.c_ofp_flow_info_pps_get
    if _newclass:pps = _swig_property(_mul_nbapi.c_ofp_flow_info_pps_get, _mul_nbapi.c_ofp_flow_info_pps_set)
    __swig_setmethods__["actions"] = _mul_nbapi.c_ofp_flow_info_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.c_ofp_flow_info_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.c_ofp_flow_info_actions_get, _mul_nbapi.c_ofp_flow_info_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_flow_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_flow_info
    __del__ = lambda self : None;
c_ofp_flow_info_swigregister = _mul_nbapi.c_ofp_flow_info_swigregister
c_ofp_flow_info_swigregister(c_ofp_flow_info)
C_FL_XPS_SZ = _mul_nbapi.C_FL_XPS_SZ

class c_ofp_flow_removed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_flow_removed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_flow_removed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_flow_removed_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_flow_removed_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_flow_removed_header_get, _mul_nbapi.c_ofp_flow_removed_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_flow_removed_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_flow_removed_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_flow_removed_datapath_id_get, _mul_nbapi.c_ofp_flow_removed_datapath_id_set)
    __swig_setmethods__["flow"] = _mul_nbapi.c_ofp_flow_removed_flow_set
    __swig_getmethods__["flow"] = _mul_nbapi.c_ofp_flow_removed_flow_get
    if _newclass:flow = _swig_property(_mul_nbapi.c_ofp_flow_removed_flow_get, _mul_nbapi.c_ofp_flow_removed_flow_set)
    __swig_setmethods__["wildcards"] = _mul_nbapi.c_ofp_flow_removed_wildcards_set
    __swig_getmethods__["wildcards"] = _mul_nbapi.c_ofp_flow_removed_wildcards_get
    if _newclass:wildcards = _swig_property(_mul_nbapi.c_ofp_flow_removed_wildcards_get, _mul_nbapi.c_ofp_flow_removed_wildcards_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.c_ofp_flow_removed_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.c_ofp_flow_removed_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.c_ofp_flow_removed_cookie_get, _mul_nbapi.c_ofp_flow_removed_cookie_set)
    __swig_setmethods__["priority"] = _mul_nbapi.c_ofp_flow_removed_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.c_ofp_flow_removed_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.c_ofp_flow_removed_priority_get, _mul_nbapi.c_ofp_flow_removed_priority_set)
    __swig_setmethods__["reason"] = _mul_nbapi.c_ofp_flow_removed_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.c_ofp_flow_removed_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.c_ofp_flow_removed_reason_get, _mul_nbapi.c_ofp_flow_removed_reason_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_flow_removed_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_flow_removed_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_flow_removed_pad_get, _mul_nbapi.c_ofp_flow_removed_pad_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.c_ofp_flow_removed_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.c_ofp_flow_removed_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.c_ofp_flow_removed_duration_sec_get, _mul_nbapi.c_ofp_flow_removed_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.c_ofp_flow_removed_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.c_ofp_flow_removed_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.c_ofp_flow_removed_duration_nsec_get, _mul_nbapi.c_ofp_flow_removed_duration_nsec_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.c_ofp_flow_removed_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.c_ofp_flow_removed_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.c_ofp_flow_removed_idle_timeout_get, _mul_nbapi.c_ofp_flow_removed_idle_timeout_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.c_ofp_flow_removed_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.c_ofp_flow_removed_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.c_ofp_flow_removed_pad2_get, _mul_nbapi.c_ofp_flow_removed_pad2_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.c_ofp_flow_removed_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.c_ofp_flow_removed_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.c_ofp_flow_removed_packet_count_get, _mul_nbapi.c_ofp_flow_removed_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.c_ofp_flow_removed_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.c_ofp_flow_removed_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.c_ofp_flow_removed_byte_count_get, _mul_nbapi.c_ofp_flow_removed_byte_count_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_flow_removed()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_flow_removed
    __del__ = lambda self : None;
c_ofp_flow_removed_swigregister = _mul_nbapi.c_ofp_flow_removed_swigregister
c_ofp_flow_removed_swigregister(c_ofp_flow_removed)

class c_ofp_packet_out(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_packet_out, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_packet_out, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_packet_out_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_packet_out_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_packet_out_header_get, _mul_nbapi.c_ofp_packet_out_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_packet_out_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_packet_out_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_packet_out_datapath_id_get, _mul_nbapi.c_ofp_packet_out_datapath_id_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.c_ofp_packet_out_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.c_ofp_packet_out_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.c_ofp_packet_out_buffer_id_get, _mul_nbapi.c_ofp_packet_out_buffer_id_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.c_ofp_packet_out_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.c_ofp_packet_out_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.c_ofp_packet_out_in_port_get, _mul_nbapi.c_ofp_packet_out_in_port_set)
    __swig_setmethods__["actions_len"] = _mul_nbapi.c_ofp_packet_out_actions_len_set
    __swig_getmethods__["actions_len"] = _mul_nbapi.c_ofp_packet_out_actions_len_get
    if _newclass:actions_len = _swig_property(_mul_nbapi.c_ofp_packet_out_actions_len_get, _mul_nbapi.c_ofp_packet_out_actions_len_set)
    __swig_setmethods__["actions"] = _mul_nbapi.c_ofp_packet_out_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.c_ofp_packet_out_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.c_ofp_packet_out_actions_get, _mul_nbapi.c_ofp_packet_out_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_packet_out()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_packet_out
    __del__ = lambda self : None;
c_ofp_packet_out_swigregister = _mul_nbapi.c_ofp_packet_out_swigregister
c_ofp_packet_out_swigregister(c_ofp_packet_out)

class c_ofp_register_app(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_register_app, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_register_app, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_register_app_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_register_app_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_register_app_header_get, _mul_nbapi.c_ofp_register_app_header_set)
    __swig_setmethods__["app_name"] = _mul_nbapi.c_ofp_register_app_app_name_set
    __swig_getmethods__["app_name"] = _mul_nbapi.c_ofp_register_app_app_name_get
    if _newclass:app_name = _swig_property(_mul_nbapi.c_ofp_register_app_app_name_get, _mul_nbapi.c_ofp_register_app_app_name_set)
    __swig_setmethods__["app_flags"] = _mul_nbapi.c_ofp_register_app_app_flags_set
    __swig_getmethods__["app_flags"] = _mul_nbapi.c_ofp_register_app_app_flags_get
    if _newclass:app_flags = _swig_property(_mul_nbapi.c_ofp_register_app_app_flags_get, _mul_nbapi.c_ofp_register_app_app_flags_set)
    __swig_setmethods__["ev_mask"] = _mul_nbapi.c_ofp_register_app_ev_mask_set
    __swig_getmethods__["ev_mask"] = _mul_nbapi.c_ofp_register_app_ev_mask_get
    if _newclass:ev_mask = _swig_property(_mul_nbapi.c_ofp_register_app_ev_mask_get, _mul_nbapi.c_ofp_register_app_ev_mask_set)
    __swig_setmethods__["dpid"] = _mul_nbapi.c_ofp_register_app_dpid_set
    __swig_getmethods__["dpid"] = _mul_nbapi.c_ofp_register_app_dpid_get
    if _newclass:dpid = _swig_property(_mul_nbapi.c_ofp_register_app_dpid_get, _mul_nbapi.c_ofp_register_app_dpid_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_register_app_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_register_app_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_register_app_pad_get, _mul_nbapi.c_ofp_register_app_pad_set)
    __swig_setmethods__["dpid_list"] = _mul_nbapi.c_ofp_register_app_dpid_list_set
    __swig_getmethods__["dpid_list"] = _mul_nbapi.c_ofp_register_app_dpid_list_get
    if _newclass:dpid_list = _swig_property(_mul_nbapi.c_ofp_register_app_dpid_list_get, _mul_nbapi.c_ofp_register_app_dpid_list_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_register_app()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_register_app
    __del__ = lambda self : None;
c_ofp_register_app_swigregister = _mul_nbapi.c_ofp_register_app_swigregister
c_ofp_register_app_swigregister(c_ofp_register_app)
C_MAX_APP_STRLEN = _mul_nbapi.C_MAX_APP_STRLEN
C_APP_ALL_SW = _mul_nbapi.C_APP_ALL_SW
C_APP_REMOTE = _mul_nbapi.C_APP_REMOTE
C_APP_AUX_REMOTE = _mul_nbapi.C_APP_AUX_REMOTE

class c_ofp_unregister_app(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_unregister_app, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_unregister_app, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_unregister_app_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_unregister_app_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_unregister_app_header_get, _mul_nbapi.c_ofp_unregister_app_header_set)
    __swig_setmethods__["app_name"] = _mul_nbapi.c_ofp_unregister_app_app_name_set
    __swig_getmethods__["app_name"] = _mul_nbapi.c_ofp_unregister_app_app_name_get
    if _newclass:app_name = _swig_property(_mul_nbapi.c_ofp_unregister_app_app_name_get, _mul_nbapi.c_ofp_unregister_app_app_name_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_unregister_app()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_unregister_app
    __del__ = lambda self : None;
c_ofp_unregister_app_swigregister = _mul_nbapi.c_ofp_unregister_app_swigregister
c_ofp_unregister_app_swigregister(c_ofp_unregister_app)

class c_ofp_set_fp_ops(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_set_fp_ops, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_set_fp_ops, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_set_fp_ops_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_set_fp_ops_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_set_fp_ops_header_get, _mul_nbapi.c_ofp_set_fp_ops_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_set_fp_ops_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_set_fp_ops_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_set_fp_ops_datapath_id_get, _mul_nbapi.c_ofp_set_fp_ops_datapath_id_set)
    __swig_setmethods__["fp_type"] = _mul_nbapi.c_ofp_set_fp_ops_fp_type_set
    __swig_getmethods__["fp_type"] = _mul_nbapi.c_ofp_set_fp_ops_fp_type_get
    if _newclass:fp_type = _swig_property(_mul_nbapi.c_ofp_set_fp_ops_fp_type_get, _mul_nbapi.c_ofp_set_fp_ops_fp_type_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_set_fp_ops_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_set_fp_ops_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_set_fp_ops_pad_get, _mul_nbapi.c_ofp_set_fp_ops_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_set_fp_ops()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_set_fp_ops
    __del__ = lambda self : None;
c_ofp_set_fp_ops_swigregister = _mul_nbapi.c_ofp_set_fp_ops_swigregister
c_ofp_set_fp_ops_swigregister(c_ofp_set_fp_ops)
C_FP_TYPE_DFL = _mul_nbapi.C_FP_TYPE_DFL
C_FP_TYPE_L2 = _mul_nbapi.C_FP_TYPE_L2

class c_ofp_auxapp_cmd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_auxapp_cmd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_auxapp_cmd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_auxapp_cmd_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_auxapp_cmd_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_auxapp_cmd_header_get, _mul_nbapi.c_ofp_auxapp_cmd_header_set)
    __swig_setmethods__["cmd_code"] = _mul_nbapi.c_ofp_auxapp_cmd_cmd_code_set
    __swig_getmethods__["cmd_code"] = _mul_nbapi.c_ofp_auxapp_cmd_cmd_code_get
    if _newclass:cmd_code = _swig_property(_mul_nbapi.c_ofp_auxapp_cmd_cmd_code_get, _mul_nbapi.c_ofp_auxapp_cmd_cmd_code_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_auxapp_cmd_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_auxapp_cmd_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_auxapp_cmd_pad_get, _mul_nbapi.c_ofp_auxapp_cmd_pad_set)
    __swig_setmethods__["data"] = _mul_nbapi.c_ofp_auxapp_cmd_data_set
    __swig_getmethods__["data"] = _mul_nbapi.c_ofp_auxapp_cmd_data_get
    if _newclass:data = _swig_property(_mul_nbapi.c_ofp_auxapp_cmd_data_get, _mul_nbapi.c_ofp_auxapp_cmd_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_auxapp_cmd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_auxapp_cmd
    __del__ = lambda self : None;
c_ofp_auxapp_cmd_swigregister = _mul_nbapi.c_ofp_auxapp_cmd_swigregister
c_ofp_auxapp_cmd_swigregister(c_ofp_auxapp_cmd)
C_AUX_CMD_SUCCESS = _mul_nbapi.C_AUX_CMD_SUCCESS
C_AUX_CMD_ECHO = _mul_nbapi.C_AUX_CMD_ECHO
C_AUX_CMD_MUL_CORE_BASE = _mul_nbapi.C_AUX_CMD_MUL_CORE_BASE
C_AUX_CMD_MUL_GET_SWITCHES = _mul_nbapi.C_AUX_CMD_MUL_GET_SWITCHES
C_AUX_CMD_MUL_GET_SWITCHES_REPLY = _mul_nbapi.C_AUX_CMD_MUL_GET_SWITCHES_REPLY
C_AUX_CMD_MUL_GET_SWITCH_DETAIL = _mul_nbapi.C_AUX_CMD_MUL_GET_SWITCH_DETAIL
C_AUX_CMD_MUL_GET_APP_FLOW = _mul_nbapi.C_AUX_CMD_MUL_GET_APP_FLOW
C_AUX_CMD_MUL_GET_ALL_FLOWS = _mul_nbapi.C_AUX_CMD_MUL_GET_ALL_FLOWS
C_AUX_CMD_MUL_GET_APP_STATIC_FLOW = _mul_nbapi.C_AUX_CMD_MUL_GET_APP_STATIC_FLOW
C_AUX_CMD_TR_BASE = _mul_nbapi.C_AUX_CMD_TR_BASE
C_AUX_CMD_TR_GET_NEIGH = _mul_nbapi.C_AUX_CMD_TR_GET_NEIGH
C_AUX_CMD_TR_NEIGH_STATUS = _mul_nbapi.C_AUX_CMD_TR_NEIGH_STATUS
C_AUX_CMD_FAB_BASE = _mul_nbapi.C_AUX_CMD_FAB_BASE
C_AUX_CMD_FAB_HOST_ADD = _mul_nbapi.C_AUX_CMD_FAB_HOST_ADD
C_AUX_CMD_FAB_HOST_DEL = _mul_nbapi.C_AUX_CMD_FAB_HOST_DEL
C_AUX_CMD_FAB_SHOW_ACTIVE_HOSTS = _mul_nbapi.C_AUX_CMD_FAB_SHOW_ACTIVE_HOSTS
C_AUX_CMD_FAB_SHOW_INACTIVE_HOSTS = _mul_nbapi.C_AUX_CMD_FAB_SHOW_INACTIVE_HOSTS
C_AUX_CMD_FAB_SHOW_ROUTES = _mul_nbapi.C_AUX_CMD_FAB_SHOW_ROUTES
C_AUX_CMD_FAB_ROUTE = _mul_nbapi.C_AUX_CMD_FAB_ROUTE
C_AUX_CMD_QCOMPILER_BASE = _mul_nbapi.C_AUX_CMD_QCOMPILER_BASE
C_AUX_CMD_QCOMPILER_ROUTE_ADD = _mul_nbapi.C_AUX_CMD_QCOMPILER_ROUTE_ADD
C_AUX_CMD_QCOMPILER_ROUTE_DEL = _mul_nbapi.C_AUX_CMD_QCOMPILER_ROUTE_DEL

class c_ofp_req_dpid_attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_req_dpid_attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_req_dpid_attr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_req_dpid_attr_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_req_dpid_attr_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_req_dpid_attr_datapath_id_get, _mul_nbapi.c_ofp_req_dpid_attr_datapath_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_req_dpid_attr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_req_dpid_attr
    __del__ = lambda self : None;
c_ofp_req_dpid_attr_swigregister = _mul_nbapi.c_ofp_req_dpid_attr_swigregister
c_ofp_req_dpid_attr_swigregister(c_ofp_req_dpid_attr)

class c_ofp_port_neigh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_port_neigh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_port_neigh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.c_ofp_port_neigh_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.c_ofp_port_neigh_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.c_ofp_port_neigh_port_no_get, _mul_nbapi.c_ofp_port_neigh_port_no_set)
    __swig_setmethods__["neigh_present"] = _mul_nbapi.c_ofp_port_neigh_neigh_present_set
    __swig_getmethods__["neigh_present"] = _mul_nbapi.c_ofp_port_neigh_neigh_present_get
    if _newclass:neigh_present = _swig_property(_mul_nbapi.c_ofp_port_neigh_neigh_present_get, _mul_nbapi.c_ofp_port_neigh_neigh_present_set)
    __swig_setmethods__["neigh_port"] = _mul_nbapi.c_ofp_port_neigh_neigh_port_set
    __swig_getmethods__["neigh_port"] = _mul_nbapi.c_ofp_port_neigh_neigh_port_get
    if _newclass:neigh_port = _swig_property(_mul_nbapi.c_ofp_port_neigh_neigh_port_get, _mul_nbapi.c_ofp_port_neigh_neigh_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_port_neigh_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_port_neigh_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_port_neigh_pad_get, _mul_nbapi.c_ofp_port_neigh_pad_set)
    __swig_setmethods__["neigh_dpid"] = _mul_nbapi.c_ofp_port_neigh_neigh_dpid_set
    __swig_getmethods__["neigh_dpid"] = _mul_nbapi.c_ofp_port_neigh_neigh_dpid_get
    if _newclass:neigh_dpid = _swig_property(_mul_nbapi.c_ofp_port_neigh_neigh_dpid_get, _mul_nbapi.c_ofp_port_neigh_neigh_dpid_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_port_neigh()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_port_neigh
    __del__ = lambda self : None;
c_ofp_port_neigh_swigregister = _mul_nbapi.c_ofp_port_neigh_swigregister
c_ofp_port_neigh_swigregister(c_ofp_port_neigh)
COFP_NEIGH_SWITCH = _mul_nbapi.COFP_NEIGH_SWITCH

class c_ofp_switch_neigh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_neigh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_neigh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["switch_id"] = _mul_nbapi.c_ofp_switch_neigh_switch_id_set
    __swig_getmethods__["switch_id"] = _mul_nbapi.c_ofp_switch_neigh_switch_id_get
    if _newclass:switch_id = _swig_property(_mul_nbapi.c_ofp_switch_neigh_switch_id_get, _mul_nbapi.c_ofp_switch_neigh_switch_id_set)
    __swig_setmethods__["data"] = _mul_nbapi.c_ofp_switch_neigh_data_set
    __swig_getmethods__["data"] = _mul_nbapi.c_ofp_switch_neigh_data_get
    if _newclass:data = _swig_property(_mul_nbapi.c_ofp_switch_neigh_data_get, _mul_nbapi.c_ofp_switch_neigh_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_neigh()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_neigh
    __del__ = lambda self : None;
c_ofp_switch_neigh_swigregister = _mul_nbapi.c_ofp_switch_neigh_swigregister
c_ofp_switch_neigh_swigregister(c_ofp_switch_neigh)

SW_INIT = _mul_nbapi.SW_INIT
SW_FEATURE_NEGO = _mul_nbapi.SW_FEATURE_NEGO
SW_REGISTERED = _mul_nbapi.SW_REGISTERED
SW_DEAD = _mul_nbapi.SW_DEAD
class c_ofp_switch_brief(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_brief, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_brief, name)
    __repr__ = _swig_repr
    __swig_setmethods__["switch_id"] = _mul_nbapi.c_ofp_switch_brief_switch_id_set
    __swig_getmethods__["switch_id"] = _mul_nbapi.c_ofp_switch_brief_switch_id_get
    if _newclass:switch_id = _swig_property(_mul_nbapi.c_ofp_switch_brief_switch_id_get, _mul_nbapi.c_ofp_switch_brief_switch_id_set)
    __swig_setmethods__["n_ports"] = _mul_nbapi.c_ofp_switch_brief_n_ports_set
    __swig_getmethods__["n_ports"] = _mul_nbapi.c_ofp_switch_brief_n_ports_get
    if _newclass:n_ports = _swig_property(_mul_nbapi.c_ofp_switch_brief_n_ports_get, _mul_nbapi.c_ofp_switch_brief_n_ports_set)
    __swig_setmethods__["state"] = _mul_nbapi.c_ofp_switch_brief_state_set
    __swig_getmethods__["state"] = _mul_nbapi.c_ofp_switch_brief_state_get
    if _newclass:state = _swig_property(_mul_nbapi.c_ofp_switch_brief_state_get, _mul_nbapi.c_ofp_switch_brief_state_set)
    __swig_setmethods__["conn_str"] = _mul_nbapi.c_ofp_switch_brief_conn_str_set
    __swig_getmethods__["conn_str"] = _mul_nbapi.c_ofp_switch_brief_conn_str_get
    if _newclass:conn_str = _swig_property(_mul_nbapi.c_ofp_switch_brief_conn_str_get, _mul_nbapi.c_ofp_switch_brief_conn_str_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_brief()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_brief
    __del__ = lambda self : None;
c_ofp_switch_brief_swigregister = _mul_nbapi.c_ofp_switch_brief_swigregister
c_ofp_switch_brief_swigregister(c_ofp_switch_brief)
OFP_CONN_DESC_SZ = _mul_nbapi.OFP_CONN_DESC_SZ

class c_ofp_host_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_host_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_host_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["switch_id"] = _mul_nbapi.c_ofp_host_mod_switch_id_set
    __swig_getmethods__["switch_id"] = _mul_nbapi.c_ofp_host_mod_switch_id_get
    if _newclass:switch_id = _swig_property(_mul_nbapi.c_ofp_host_mod_switch_id_get, _mul_nbapi.c_ofp_host_mod_switch_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_host_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_host_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_host_mod_pad_get, _mul_nbapi.c_ofp_host_mod_pad_set)
    __swig_setmethods__["host_flow"] = _mul_nbapi.c_ofp_host_mod_host_flow_set
    __swig_getmethods__["host_flow"] = _mul_nbapi.c_ofp_host_mod_host_flow_get
    if _newclass:host_flow = _swig_property(_mul_nbapi.c_ofp_host_mod_host_flow_get, _mul_nbapi.c_ofp_host_mod_host_flow_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_host_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_host_mod
    __del__ = lambda self : None;
c_ofp_host_mod_swigregister = _mul_nbapi.c_ofp_host_mod_swigregister
c_ofp_host_mod_swigregister(c_ofp_host_mod)

class c_ofp_route(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_route, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_route, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src_host"] = _mul_nbapi.c_ofp_route_src_host_set
    __swig_getmethods__["src_host"] = _mul_nbapi.c_ofp_route_src_host_get
    if _newclass:src_host = _swig_property(_mul_nbapi.c_ofp_route_src_host_get, _mul_nbapi.c_ofp_route_src_host_set)
    __swig_setmethods__["dst_host"] = _mul_nbapi.c_ofp_route_dst_host_set
    __swig_getmethods__["dst_host"] = _mul_nbapi.c_ofp_route_dst_host_get
    if _newclass:dst_host = _swig_property(_mul_nbapi.c_ofp_route_dst_host_get, _mul_nbapi.c_ofp_route_dst_host_set)
    __swig_setmethods__["route_links"] = _mul_nbapi.c_ofp_route_route_links_set
    __swig_getmethods__["route_links"] = _mul_nbapi.c_ofp_route_route_links_get
    if _newclass:route_links = _swig_property(_mul_nbapi.c_ofp_route_route_links_get, _mul_nbapi.c_ofp_route_route_links_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_route()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_route
    __del__ = lambda self : None;
c_ofp_route_swigregister = _mul_nbapi.c_ofp_route_swigregister
c_ofp_route_swigregister(c_ofp_route)

class c_ofp_route_link(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_route_link, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_route_link, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_route_link_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_route_link_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_route_link_datapath_id_get, _mul_nbapi.c_ofp_route_link_datapath_id_set)
    __swig_setmethods__["src_link"] = _mul_nbapi.c_ofp_route_link_src_link_set
    __swig_getmethods__["src_link"] = _mul_nbapi.c_ofp_route_link_src_link_get
    if _newclass:src_link = _swig_property(_mul_nbapi.c_ofp_route_link_src_link_get, _mul_nbapi.c_ofp_route_link_src_link_set)
    __swig_setmethods__["dst_link"] = _mul_nbapi.c_ofp_route_link_dst_link_set
    __swig_getmethods__["dst_link"] = _mul_nbapi.c_ofp_route_link_dst_link_get
    if _newclass:dst_link = _swig_property(_mul_nbapi.c_ofp_route_link_dst_link_get, _mul_nbapi.c_ofp_route_link_dst_link_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_route_link_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_route_link_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_route_link_pad_get, _mul_nbapi.c_ofp_route_link_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_route_link()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_route_link
    __del__ = lambda self : None;
c_ofp_route_link_swigregister = _mul_nbapi.c_ofp_route_link_swigregister
c_ofp_route_link_swigregister(c_ofp_route_link)

class c_ofp_s_chain_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_s_chain_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_s_chain_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["user_info"] = _mul_nbapi.c_ofp_s_chain_mod_user_info_set
    __swig_getmethods__["user_info"] = _mul_nbapi.c_ofp_s_chain_mod_user_info_get
    if _newclass:user_info = _swig_property(_mul_nbapi.c_ofp_s_chain_mod_user_info_get, _mul_nbapi.c_ofp_s_chain_mod_user_info_set)
    __swig_setmethods__["num_nfvs"] = _mul_nbapi.c_ofp_s_chain_mod_num_nfvs_set
    __swig_getmethods__["num_nfvs"] = _mul_nbapi.c_ofp_s_chain_mod_num_nfvs_get
    if _newclass:num_nfvs = _swig_property(_mul_nbapi.c_ofp_s_chain_mod_num_nfvs_get, _mul_nbapi.c_ofp_s_chain_mod_num_nfvs_set)
    __swig_setmethods__["nfv_list"] = _mul_nbapi.c_ofp_s_chain_mod_nfv_list_set
    __swig_getmethods__["nfv_list"] = _mul_nbapi.c_ofp_s_chain_mod_nfv_list_get
    if _newclass:nfv_list = _swig_property(_mul_nbapi.c_ofp_s_chain_mod_nfv_list_get, _mul_nbapi.c_ofp_s_chain_mod_nfv_list_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_s_chain_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_s_chain_mod
    __del__ = lambda self : None;
c_ofp_s_chain_mod_swigregister = _mul_nbapi.c_ofp_s_chain_mod_swigregister
c_ofp_s_chain_mod_swigregister(c_ofp_s_chain_mod)
MAX_NFV = _mul_nbapi.MAX_NFV
MAX_NFV_NAME = _mul_nbapi.MAX_NFV_NAME

class c_ofp_qcompiler_route_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_qcompiler_route_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_qcompiler_route_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["priority"] = _mul_nbapi.c_ofp_qcompiler_route_mod_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.c_ofp_qcompiler_route_mod_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.c_ofp_qcompiler_route_mod_priority_get, _mul_nbapi.c_ofp_qcompiler_route_mod_priority_set)
    __swig_setmethods__["rta_oif"] = _mul_nbapi.c_ofp_qcompiler_route_mod_rta_oif_set
    __swig_getmethods__["rta_oif"] = _mul_nbapi.c_ofp_qcompiler_route_mod_rta_oif_get
    if _newclass:rta_oif = _swig_property(_mul_nbapi.c_ofp_qcompiler_route_mod_rta_oif_get, _mul_nbapi.c_ofp_qcompiler_route_mod_rta_oif_set)
    __swig_setmethods__["rta_iif"] = _mul_nbapi.c_ofp_qcompiler_route_mod_rta_iif_set
    __swig_getmethods__["rta_iif"] = _mul_nbapi.c_ofp_qcompiler_route_mod_rta_iif_get
    if _newclass:rta_iif = _swig_property(_mul_nbapi.c_ofp_qcompiler_route_mod_rta_iif_get, _mul_nbapi.c_ofp_qcompiler_route_mod_rta_iif_set)
    __swig_setmethods__["rta_src"] = _mul_nbapi.c_ofp_qcompiler_route_mod_rta_src_set
    __swig_getmethods__["rta_src"] = _mul_nbapi.c_ofp_qcompiler_route_mod_rta_src_get
    if _newclass:rta_src = _swig_property(_mul_nbapi.c_ofp_qcompiler_route_mod_rta_src_get, _mul_nbapi.c_ofp_qcompiler_route_mod_rta_src_set)
    __swig_setmethods__["rta_dst"] = _mul_nbapi.c_ofp_qcompiler_route_mod_rta_dst_set
    __swig_getmethods__["rta_dst"] = _mul_nbapi.c_ofp_qcompiler_route_mod_rta_dst_get
    if _newclass:rta_dst = _swig_property(_mul_nbapi.c_ofp_qcompiler_route_mod_rta_dst_get, _mul_nbapi.c_ofp_qcompiler_route_mod_rta_dst_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_qcompiler_route_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_qcompiler_route_mod
    __del__ = lambda self : None;
c_ofp_qcompiler_route_mod_swigregister = _mul_nbapi.c_ofp_qcompiler_route_mod_swigregister
c_ofp_qcompiler_route_mod_swigregister(c_ofp_qcompiler_route_mod)

C_OFP_ERR_CODE_BASE = _mul_nbapi.C_OFP_ERR_CODE_BASE
OFPBRC_BAD_DPID = _mul_nbapi.OFPBRC_BAD_DPID
OFPBRC_BAD_APP_REG = _mul_nbapi.OFPBRC_BAD_APP_REG
OFPBRC_BAD_APP_UREG = _mul_nbapi.OFPBRC_BAD_APP_UREG
OFPBRC_BAD_NO_INFO = _mul_nbapi.OFPBRC_BAD_NO_INFO
OFPBRC_BAD_GENERIC = _mul_nbapi.OFPBRC_BAD_GENERIC
OFPBAC_BAD_GENERIC = _mul_nbapi.OFPBAC_BAD_GENERIC
OFPFMFC_BAD_FLAG = _mul_nbapi.OFPFMFC_BAD_FLAG
OFPFMFC_GENERIC = _mul_nbapi.OFPFMFC_GENERIC
C_OFP_MAX_ERR_LEN = _mul_nbapi.C_OFP_MAX_ERR_LEN

def mul_app_free_buf(*args):
  return _mul_nbapi.mul_app_free_buf(*args)
mul_app_free_buf = _mul_nbapi.mul_app_free_buf

def mul_register_app(*args):
  return _mul_nbapi.mul_register_app(*args)
mul_register_app = _mul_nbapi.mul_register_app

def mul_unregister_app(*args):
  return _mul_nbapi.mul_unregister_app(*args)
mul_unregister_app = _mul_nbapi.mul_unregister_app

def mul_app_command_handler(*args):
  return _mul_nbapi.mul_app_command_handler(*args)
mul_app_command_handler = _mul_nbapi.mul_app_command_handler

def mul_app_send_flow_add(*args):
  return _mul_nbapi.mul_app_send_flow_add(*args)
mul_app_send_flow_add = _mul_nbapi.mul_app_send_flow_add

def mul_service_send_flow_add(*args):
  return _mul_nbapi.mul_service_send_flow_add(*args)
mul_service_send_flow_add = _mul_nbapi.mul_service_send_flow_add

def mul_app_send_flow_del(*args):
  return _mul_nbapi.mul_app_send_flow_del(*args)
mul_app_send_flow_del = _mul_nbapi.mul_app_send_flow_del

def mul_service_send_flow_del(*args):
  return _mul_nbapi.mul_service_send_flow_del(*args)
mul_service_send_flow_del = _mul_nbapi.mul_service_send_flow_del

def mul_app_send_pkt_out(*args):
  return _mul_nbapi.mul_app_send_pkt_out(*args)
mul_app_send_pkt_out = _mul_nbapi.mul_app_send_pkt_out

def mul_app_create_service(*args):
  return _mul_nbapi.mul_app_create_service(*args)
mul_app_create_service = _mul_nbapi.mul_app_create_service

def mul_app_get_service(*args):
  return _mul_nbapi.mul_app_get_service(*args)
mul_app_get_service = _mul_nbapi.mul_app_get_service

def mul_app_get_service_notify(*args):
  return _mul_nbapi.mul_app_get_service_notify(*args)
mul_app_get_service_notify = _mul_nbapi.mul_app_get_service_notify

def mul_app_destroy_service(*args):
  return _mul_nbapi.mul_app_destroy_service(*args)
mul_app_destroy_service = _mul_nbapi.mul_app_destroy_service
RT_HB_INTVL_SEC = _mul_nbapi.RT_HB_INTVL_SEC
RT_HB_INTVL_INITSEC = _mul_nbapi.RT_HB_INTVL_INITSEC
RT_HB_INTVL_USEC = _mul_nbapi.RT_HB_INTVL_USEC
RT_MAX_GET_RETRIES = _mul_nbapi.RT_MAX_GET_RETRIES
RT_MP_SEL_LATENCY = _mul_nbapi.RT_MP_SEL_LATENCY
RT_MP_SEL_THROUGHPUT = _mul_nbapi.RT_MP_SEL_THROUGHPUT
class lweight_pair_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lweight_pair_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lweight_pair_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["la"] = _mul_nbapi.lweight_pair__la_set
    __swig_getmethods__["la"] = _mul_nbapi.lweight_pair__la_get
    if _newclass:la = _swig_property(_mul_nbapi.lweight_pair__la_get, _mul_nbapi.lweight_pair__la_set)
    __swig_setmethods__["lb"] = _mul_nbapi.lweight_pair__lb_set
    __swig_getmethods__["lb"] = _mul_nbapi.lweight_pair__lb_get
    if _newclass:lb = _swig_property(_mul_nbapi.lweight_pair__lb_get, _mul_nbapi.lweight_pair__lb_set)
    __swig_setmethods__["weight"] = _mul_nbapi.lweight_pair__weight_set
    __swig_getmethods__["weight"] = _mul_nbapi.lweight_pair__weight_get
    if _newclass:weight = _swig_property(_mul_nbapi.lweight_pair__weight_get, _mul_nbapi.lweight_pair__weight_set)
    __swig_setmethods__["onlink"] = _mul_nbapi.lweight_pair__onlink_set
    __swig_getmethods__["onlink"] = _mul_nbapi.lweight_pair__onlink_get
    if _newclass:onlink = _swig_property(_mul_nbapi.lweight_pair__onlink_get, _mul_nbapi.lweight_pair__onlink_set)
    def __init__(self): 
        this = _mul_nbapi.new_lweight_pair_()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_lweight_pair_
    __del__ = lambda self : None;
lweight_pair__swigregister = _mul_nbapi.lweight_pair__swigregister
lweight_pair__swigregister(lweight_pair_)
NEIGH_DFL_WEIGHT = _mul_nbapi.NEIGH_DFL_WEIGHT

class rt_adj_elem_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rt_adj_elem_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rt_adj_elem_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pairs"] = _mul_nbapi.rt_adj_elem__pairs_set
    __swig_getmethods__["pairs"] = _mul_nbapi.rt_adj_elem__pairs_get
    if _newclass:pairs = _swig_property(_mul_nbapi.rt_adj_elem__pairs_get, _mul_nbapi.rt_adj_elem__pairs_set)
    __swig_setmethods__["adj_pairs"] = _mul_nbapi.rt_adj_elem__adj_pairs_set
    __swig_getmethods__["adj_pairs"] = _mul_nbapi.rt_adj_elem__adj_pairs_get
    if _newclass:adj_pairs = _swig_property(_mul_nbapi.rt_adj_elem__adj_pairs_get, _mul_nbapi.rt_adj_elem__adj_pairs_set)
    def __init__(self): 
        this = _mul_nbapi.new_rt_adj_elem_()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_rt_adj_elem_
    __del__ = lambda self : None;
rt_adj_elem__swigregister = _mul_nbapi.rt_adj_elem__swigregister
rt_adj_elem__swigregister(rt_adj_elem_)
RT_MAX_ADJ_PAIRS = _mul_nbapi.RT_MAX_ADJ_PAIRS

class rt_path_elem_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rt_path_elem_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rt_path_elem_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sw_alias"] = _mul_nbapi.rt_path_elem__sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.rt_path_elem__sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.rt_path_elem__sw_alias_get, _mul_nbapi.rt_path_elem__sw_alias_set)
    __swig_setmethods__["flags"] = _mul_nbapi.rt_path_elem__flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.rt_path_elem__flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.rt_path_elem__flags_get, _mul_nbapi.rt_path_elem__flags_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.rt_path_elem__in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.rt_path_elem__in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.rt_path_elem__in_port_get, _mul_nbapi.rt_path_elem__in_port_set)
    __swig_setmethods__["link"] = _mul_nbapi.rt_path_elem__link_set
    __swig_getmethods__["link"] = _mul_nbapi.rt_path_elem__link_get
    if _newclass:link = _swig_property(_mul_nbapi.rt_path_elem__link_get, _mul_nbapi.rt_path_elem__link_set)
    def __init__(self): 
        this = _mul_nbapi.new_rt_path_elem_()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_rt_path_elem_
    __del__ = lambda self : None;
rt_path_elem__swigregister = _mul_nbapi.rt_path_elem__swigregister
rt_path_elem__swigregister(rt_path_elem_)
RT_PELEM_FIRST_HOP = _mul_nbapi.RT_PELEM_FIRST_HOP
RT_PELEM_LAST_HOP = _mul_nbapi.RT_PELEM_LAST_HOP

class rt_transit_elem_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rt_transit_elem_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rt_transit_elem_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_paths"] = _mul_nbapi.rt_transit_elem__n_paths_set
    __swig_getmethods__["n_paths"] = _mul_nbapi.rt_transit_elem__n_paths_get
    if _newclass:n_paths = _swig_property(_mul_nbapi.rt_transit_elem__n_paths_get, _mul_nbapi.rt_transit_elem__n_paths_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.rt_transit_elem__sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.rt_transit_elem__sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.rt_transit_elem__sw_alias_get, _mul_nbapi.rt_transit_elem__sw_alias_set)
    def __init__(self): 
        this = _mul_nbapi.new_rt_transit_elem_()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_rt_transit_elem_
    __del__ = lambda self : None;
rt_transit_elem__swigregister = _mul_nbapi.rt_transit_elem__swigregister
rt_transit_elem__swigregister(rt_transit_elem_)
RT_MAX_EQ_PATHS = _mul_nbapi.RT_MAX_EQ_PATHS

class rt_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rt_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rt_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["route"] = _mul_nbapi.rt_list_route_set
    __swig_getmethods__["route"] = _mul_nbapi.rt_list_route_get
    if _newclass:route = _swig_property(_mul_nbapi.rt_list_route_get, _mul_nbapi.rt_list_route_set)
    __swig_setmethods__["next"] = _mul_nbapi.rt_list_next_set
    __swig_getmethods__["next"] = _mul_nbapi.rt_list_next_get
    if _newclass:next = _swig_property(_mul_nbapi.rt_list_next_get, _mul_nbapi.rt_list_next_set)
    def __init__(self): 
        this = _mul_nbapi.new_rt_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_rt_list
    __del__ = lambda self : None;
rt_list_swigregister = _mul_nbapi.rt_list_swigregister
rt_list_swigregister(rt_list)


def mul_route_path_traverse(*args):
  return _mul_nbapi.mul_route_path_traverse(*args)
mul_route_path_traverse = _mul_nbapi.mul_route_path_traverse

def mul_destroy_route(*args):
  return _mul_nbapi.mul_destroy_route(*args)
mul_destroy_route = _mul_nbapi.mul_destroy_route

def mul_route_get_nodes(*args):
  return _mul_nbapi.mul_route_get_nodes(*args)
mul_route_get_nodes = _mul_nbapi.mul_route_get_nodes

def mul_route_get(*args):
  return _mul_nbapi.mul_route_get(*args)
mul_route_get = _mul_nbapi.mul_route_get

def mul_route_get_mp(*args):
  return _mul_nbapi.mul_route_get_mp(*args)
mul_route_get_mp = _mul_nbapi.mul_route_get_mp

def mul_route_init_block_meta(*args):
  return _mul_nbapi.mul_route_init_block_meta(*args)
mul_route_init_block_meta = _mul_nbapi.mul_route_init_block_meta

def mul_route_service_get():
  return _mul_nbapi.mul_route_service_get()
mul_route_service_get = _mul_nbapi.mul_route_service_get

def mul_route_service_destroy(*args):
  return _mul_nbapi.mul_route_service_destroy(*args)
mul_route_service_destroy = _mul_nbapi.mul_route_service_destroy

def mul_route_list_size(*args):
  return _mul_nbapi.mul_route_list_size(*args)
mul_route_list_size = _mul_nbapi.mul_route_list_size

def mul_route_apsp_get_mp_service_sp(*args):
  return _mul_nbapi.mul_route_apsp_get_mp_service_sp(*args)
mul_route_apsp_get_mp_service_sp = _mul_nbapi.mul_route_apsp_get_mp_service_sp

def mul_route_get_mp_service(*args):
  return _mul_nbapi.mul_route_get_mp_service(*args)
mul_route_get_mp_service = _mul_nbapi.mul_route_get_mp_service
class nbapi_switch_brief_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_switch_brief_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_switch_brief_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_switch_brief_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_switch_brief_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_switch_brief_list_t_array_get, _mul_nbapi.nbapi_switch_brief_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_switch_brief_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_switch_brief_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_switch_brief_list_t_length_get, _mul_nbapi.nbapi_switch_brief_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_switch_brief_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_switch_brief_list_t
    __del__ = lambda self : None;
nbapi_switch_brief_list_t_swigregister = _mul_nbapi.nbapi_switch_brief_list_t_swigregister
nbapi_switch_brief_list_t_swigregister(nbapi_switch_brief_list_t)

class nbapi_port_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_port_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_port_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_port_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_port_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_port_list_t_array_get, _mul_nbapi.nbapi_port_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_port_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_port_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_port_list_t_length_get, _mul_nbapi.nbapi_port_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_port_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_port_list_t
    __del__ = lambda self : None;
nbapi_port_list_t_swigregister = _mul_nbapi.nbapi_port_list_t_swigregister
nbapi_port_list_t_swigregister(nbapi_port_list_t)

class nbapi_port_neigh_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_port_neigh_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_port_neigh_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_port_neigh_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_port_neigh_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_port_neigh_list_t_array_get, _mul_nbapi.nbapi_port_neigh_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_port_neigh_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_port_neigh_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_port_neigh_list_t_length_get, _mul_nbapi.nbapi_port_neigh_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_port_neigh_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_port_neigh_list_t
    __del__ = lambda self : None;
nbapi_port_neigh_list_t_swigregister = _mul_nbapi.nbapi_port_neigh_list_t_swigregister
nbapi_port_neigh_list_t_swigregister(nbapi_port_neigh_list_t)

class ofp_phy_port_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_phy_port_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_phy_port_array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mul_nbapi.new_ofp_phy_port_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_phy_port_array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _mul_nbapi.ofp_phy_port_array___getitem__(self, *args)
    def __setitem__(self, *args): return _mul_nbapi.ofp_phy_port_array___setitem__(self, *args)
    def cast(self): return _mul_nbapi.ofp_phy_port_array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _mul_nbapi.ofp_phy_port_array_frompointer
    if _newclass:frompointer = staticmethod(_mul_nbapi.ofp_phy_port_array_frompointer)
ofp_phy_port_array_swigregister = _mul_nbapi.ofp_phy_port_array_swigregister
ofp_phy_port_array_swigregister(ofp_phy_port_array)

def ofp_phy_port_array_frompointer(*args):
  return _mul_nbapi.ofp_phy_port_array_frompointer(*args)
ofp_phy_port_array_frompointer = _mul_nbapi.ofp_phy_port_array_frompointer


def get_switch_alias_from_switch_info(*args):
  return _mul_nbapi.get_switch_alias_from_switch_info(*args)
get_switch_alias_from_switch_info = _mul_nbapi.get_switch_alias_from_switch_info

def get_switch(*args):
  return _mul_nbapi.get_switch(*args)
get_switch = _mul_nbapi.get_switch

def get_switch_all():
  return _mul_nbapi.get_switch_all()
get_switch_all = _mul_nbapi.get_switch_all

def get_switch_port(*args):
  return _mul_nbapi.get_switch_port(*args)
get_switch_port = _mul_nbapi.get_switch_port

def get_switch_port_all(*args):
  return _mul_nbapi.get_switch_port_all(*args)
get_switch_port_all = _mul_nbapi.get_switch_port_all

def get_switch_neighbor_all(*args):
  return _mul_nbapi.get_switch_neighbor_all(*args)
get_switch_neighbor_all = _mul_nbapi.get_switch_neighbor_all
NBAPI_FLOW_STRUCT_TYPE_OUTPUT = _mul_nbapi.NBAPI_FLOW_STRUCT_TYPE_OUTPUT
NBAPI_FLOW_STRUCT_TYPE_VLAN_VID = _mul_nbapi.NBAPI_FLOW_STRUCT_TYPE_VLAN_VID
NBAPI_FLOW_STRUCT_TYPE_HEADER = _mul_nbapi.NBAPI_FLOW_STRUCT_TYPE_HEADER
NBAPI_FLOW_STRUCT_TYPE_DL_ADDR = _mul_nbapi.NBAPI_FLOW_STRUCT_TYPE_DL_ADDR
NBAPI_FLOW_STRUCT_TYPE_NW_ADDR = _mul_nbapi.NBAPI_FLOW_STRUCT_TYPE_NW_ADDR
NBAPI_FLOW_STRUCT_TYPE_VLAN_PCP = _mul_nbapi.NBAPI_FLOW_STRUCT_TYPE_VLAN_PCP
NBAPI_FLOW_STRUCT_TYPE_NW_TOS = _mul_nbapi.NBAPI_FLOW_STRUCT_TYPE_NW_TOS
NBAPI_FLOW_STRUCT_TYPE_TP_PORT = _mul_nbapi.NBAPI_FLOW_STRUCT_TYPE_TP_PORT

def add_static_flow(*args):
  return _mul_nbapi.add_static_flow(*args)
add_static_flow = _mul_nbapi.add_static_flow

def delete_static_flow(*args):
  return _mul_nbapi.delete_static_flow(*args)
delete_static_flow = _mul_nbapi.delete_static_flow

def nbapi_parse_mac_to_str(*args):
  return _mul_nbapi.nbapi_parse_mac_to_str(*args)
nbapi_parse_mac_to_str = _mul_nbapi.nbapi_parse_mac_to_str

def nbapi_parse_nw_addr_to_str(*args):
  return _mul_nbapi.nbapi_parse_nw_addr_to_str(*args)
nbapi_parse_nw_addr_to_str = _mul_nbapi.nbapi_parse_nw_addr_to_str

def nbapi_parse_cidr_to_str(*args):
  return _mul_nbapi.nbapi_parse_cidr_to_str(*args)
nbapi_parse_cidr_to_str = _mul_nbapi.nbapi_parse_cidr_to_str

def nbapi_flow_make_flow(*args):
  return _mul_nbapi.nbapi_flow_make_flow(*args)
nbapi_flow_make_flow = _mul_nbapi.nbapi_flow_make_flow

def nbapi_fabric_make_flow(*args):
  return _mul_nbapi.nbapi_fabric_make_flow(*args)
nbapi_fabric_make_flow = _mul_nbapi.nbapi_fabric_make_flow

def nbapi_make_action_output(*args):
  return _mul_nbapi.nbapi_make_action_output(*args)
nbapi_make_action_output = _mul_nbapi.nbapi_make_action_output

def nbapi_make_action_set_vid(*args):
  return _mul_nbapi.nbapi_make_action_set_vid(*args)
nbapi_make_action_set_vid = _mul_nbapi.nbapi_make_action_set_vid

def nbapi_make_action_strip_vlan():
  return _mul_nbapi.nbapi_make_action_strip_vlan()
nbapi_make_action_strip_vlan = _mul_nbapi.nbapi_make_action_strip_vlan

def nbapi_make_action_set_dmac(*args):
  return _mul_nbapi.nbapi_make_action_set_dmac(*args)
nbapi_make_action_set_dmac = _mul_nbapi.nbapi_make_action_set_dmac

def nbapi_make_action_set_smac(*args):
  return _mul_nbapi.nbapi_make_action_set_smac(*args)
nbapi_make_action_set_smac = _mul_nbapi.nbapi_make_action_set_smac

def nbapi_make_action_set_nw_saddr(*args):
  return _mul_nbapi.nbapi_make_action_set_nw_saddr(*args)
nbapi_make_action_set_nw_saddr = _mul_nbapi.nbapi_make_action_set_nw_saddr

def nbapi_make_action_set_nw_daddr(*args):
  return _mul_nbapi.nbapi_make_action_set_nw_daddr(*args)
nbapi_make_action_set_nw_daddr = _mul_nbapi.nbapi_make_action_set_nw_daddr

def nbapi_make_action_set_vlan_pcp(*args):
  return _mul_nbapi.nbapi_make_action_set_vlan_pcp(*args)
nbapi_make_action_set_vlan_pcp = _mul_nbapi.nbapi_make_action_set_vlan_pcp

def nbapi_make_action_set_nw_tos(*args):
  return _mul_nbapi.nbapi_make_action_set_nw_tos(*args)
nbapi_make_action_set_nw_tos = _mul_nbapi.nbapi_make_action_set_nw_tos

def nbapi_make_action_set_tp_dport(*args):
  return _mul_nbapi.nbapi_make_action_set_tp_dport(*args)
nbapi_make_action_set_tp_dport = _mul_nbapi.nbapi_make_action_set_tp_dport

def nbapi_make_action_set_tp_sport(*args):
  return _mul_nbapi.nbapi_make_action_set_tp_sport(*args)
nbapi_make_action_set_tp_sport = _mul_nbapi.nbapi_make_action_set_tp_sport
class nbapi_path_elem_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_path_elem_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_path_elem_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["switch_alias"] = _mul_nbapi.nbapi_path_elem_t_switch_alias_set
    __swig_getmethods__["switch_alias"] = _mul_nbapi.nbapi_path_elem_t_switch_alias_get
    if _newclass:switch_alias = _swig_property(_mul_nbapi.nbapi_path_elem_t_switch_alias_get, _mul_nbapi.nbapi_path_elem_t_switch_alias_set)
    __swig_setmethods__["ingress_port_no"] = _mul_nbapi.nbapi_path_elem_t_ingress_port_no_set
    __swig_getmethods__["ingress_port_no"] = _mul_nbapi.nbapi_path_elem_t_ingress_port_no_get
    if _newclass:ingress_port_no = _swig_property(_mul_nbapi.nbapi_path_elem_t_ingress_port_no_get, _mul_nbapi.nbapi_path_elem_t_ingress_port_no_set)
    __swig_setmethods__["egress_port_no"] = _mul_nbapi.nbapi_path_elem_t_egress_port_no_set
    __swig_getmethods__["egress_port_no"] = _mul_nbapi.nbapi_path_elem_t_egress_port_no_get
    if _newclass:egress_port_no = _swig_property(_mul_nbapi.nbapi_path_elem_t_egress_port_no_get, _mul_nbapi.nbapi_path_elem_t_egress_port_no_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_path_elem_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_path_elem_t
    __del__ = lambda self : None;
nbapi_path_elem_t_swigregister = _mul_nbapi.nbapi_path_elem_t_swigregister
nbapi_path_elem_t_swigregister(nbapi_path_elem_t)

class nbapi_route_elem_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_route_elem_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_route_elem_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path_array"] = _mul_nbapi.nbapi_route_elem_t_path_array_set
    __swig_getmethods__["path_array"] = _mul_nbapi.nbapi_route_elem_t_path_array_get
    if _newclass:path_array = _swig_property(_mul_nbapi.nbapi_route_elem_t_path_array_get, _mul_nbapi.nbapi_route_elem_t_path_array_set)
    __swig_setmethods__["path_length"] = _mul_nbapi.nbapi_route_elem_t_path_length_set
    __swig_getmethods__["path_length"] = _mul_nbapi.nbapi_route_elem_t_path_length_get
    if _newclass:path_length = _swig_property(_mul_nbapi.nbapi_route_elem_t_path_length_get, _mul_nbapi.nbapi_route_elem_t_path_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_route_elem_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_route_elem_t
    __del__ = lambda self : None;
nbapi_route_elem_t_swigregister = _mul_nbapi.nbapi_route_elem_t_swigregister
nbapi_route_elem_t_swigregister(nbapi_route_elem_t)

class nbapi_path_elem_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_path_elem_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_path_elem_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_path_elem_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_path_elem_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_path_elem_list_t_array_get, _mul_nbapi.nbapi_path_elem_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_path_elem_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_path_elem_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_path_elem_list_t_length_get, _mul_nbapi.nbapi_path_elem_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_path_elem_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_path_elem_list_t
    __del__ = lambda self : None;
nbapi_path_elem_list_t_swigregister = _mul_nbapi.nbapi_path_elem_list_t_swigregister
nbapi_path_elem_list_t_swigregister(nbapi_path_elem_list_t)

class nbapi_route_elem_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_route_elem_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_route_elem_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_route_elem_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_route_elem_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_route_elem_list_t_array_get, _mul_nbapi.nbapi_route_elem_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_route_elem_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_route_elem_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_route_elem_list_t_length_get, _mul_nbapi.nbapi_route_elem_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_route_elem_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_route_elem_list_t
    __del__ = lambda self : None;
nbapi_route_elem_list_t_swigregister = _mul_nbapi.nbapi_route_elem_list_t_swigregister
nbapi_route_elem_list_t_swigregister(nbapi_route_elem_list_t)

class nbapi_path_elem_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_path_elem_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_path_elem_array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mul_nbapi.new_nbapi_path_elem_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_path_elem_array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _mul_nbapi.nbapi_path_elem_array___getitem__(self, *args)
    def __setitem__(self, *args): return _mul_nbapi.nbapi_path_elem_array___setitem__(self, *args)
    def cast(self): return _mul_nbapi.nbapi_path_elem_array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _mul_nbapi.nbapi_path_elem_array_frompointer
    if _newclass:frompointer = staticmethod(_mul_nbapi.nbapi_path_elem_array_frompointer)
nbapi_path_elem_array_swigregister = _mul_nbapi.nbapi_path_elem_array_swigregister
nbapi_path_elem_array_swigregister(nbapi_path_elem_array)

def nbapi_path_elem_array_frompointer(*args):
  return _mul_nbapi.nbapi_path_elem_array_frompointer(*args)
nbapi_path_elem_array_frompointer = _mul_nbapi.nbapi_path_elem_array_frompointer


def get_simple_path(*args):
  return _mul_nbapi.get_simple_path(*args)
get_simple_path = _mul_nbapi.get_simple_path

def get_service_path(*args):
  return _mul_nbapi.get_service_path(*args)
get_service_path = _mul_nbapi.get_service_path

def get_simple_mp_path(*args):
  return _mul_nbapi.get_simple_mp_path(*args)
get_simple_mp_path = _mul_nbapi.get_simple_mp_path
class Port_Stats_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port_Stats_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Port_Stats_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bps"] = _mul_nbapi.Port_Stats_t_bps_set
    __swig_getmethods__["bps"] = _mul_nbapi.Port_Stats_t_bps_get
    if _newclass:bps = _swig_property(_mul_nbapi.Port_Stats_t_bps_get, _mul_nbapi.Port_Stats_t_bps_set)
    __swig_setmethods__["pps"] = _mul_nbapi.Port_Stats_t_pps_set
    __swig_getmethods__["pps"] = _mul_nbapi.Port_Stats_t_pps_get
    if _newclass:pps = _swig_property(_mul_nbapi.Port_Stats_t_pps_get, _mul_nbapi.Port_Stats_t_pps_set)
    def __init__(self): 
        this = _mul_nbapi.new_Port_Stats_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_Port_Stats_t
    __del__ = lambda self : None;
Port_Stats_t_swigregister = _mul_nbapi.Port_Stats_t_swigregister
Port_Stats_t_swigregister(Port_Stats_t)

class nbapi_switch_flow_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_switch_flow_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_switch_flow_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_switch_flow_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_switch_flow_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_switch_flow_list_t_array_get, _mul_nbapi.nbapi_switch_flow_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_switch_flow_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_switch_flow_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_switch_flow_list_t_length_get, _mul_nbapi.nbapi_switch_flow_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_switch_flow_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_switch_flow_list_t
    __del__ = lambda self : None;
nbapi_switch_flow_list_t_swigregister = _mul_nbapi.nbapi_switch_flow_list_t_swigregister
nbapi_switch_flow_list_t_swigregister(nbapi_switch_flow_list_t)


def get_switch_statistics_all(*args):
  return _mul_nbapi.get_switch_statistics_all(*args)
get_switch_statistics_all = _mul_nbapi.get_switch_statistics_all

def get_flow_statistics(*args):
  return _mul_nbapi.get_flow_statistics(*args)
get_flow_statistics = _mul_nbapi.get_flow_statistics

def get_switch_statistics_port(*args):
  return _mul_nbapi.get_switch_statistics_port(*args)
get_switch_statistics_port = _mul_nbapi.get_switch_statistics_port

def port_stats_free(*args):
  return _mul_nbapi.port_stats_free(*args)
port_stats_free = _mul_nbapi.port_stats_free

def nbapi_parse_bps_to_str(*args):
  return _mul_nbapi.nbapi_parse_bps_to_str(*args)
nbapi_parse_bps_to_str = _mul_nbapi.nbapi_parse_bps_to_str

def nbapi_parse_pps_to_str(*args):
  return _mul_nbapi.nbapi_parse_pps_to_str(*args)
nbapi_parse_pps_to_str = _mul_nbapi.nbapi_parse_pps_to_str
class nbapi_fabric_host_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_fabric_host_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_fabric_host_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_fabric_host_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_fabric_host_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_fabric_host_list_t_array_get, _mul_nbapi.nbapi_fabric_host_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_fabric_host_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_fabric_host_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_fabric_host_list_t_length_get, _mul_nbapi.nbapi_fabric_host_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_fabric_host_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_fabric_host_list_t
    __del__ = lambda self : None;
nbapi_fabric_host_list_t_swigregister = _mul_nbapi.nbapi_fabric_host_list_t_swigregister
nbapi_fabric_host_list_t_swigregister(nbapi_fabric_host_list_t)


def get_fabric_host_all(*args):
  return _mul_nbapi.get_fabric_host_all(*args)
get_fabric_host_all = _mul_nbapi.get_fabric_host_all

def add_fabric_host(*args):
  return _mul_nbapi.add_fabric_host(*args)
add_fabric_host = _mul_nbapi.add_fabric_host

def delete_fabric_host(*args):
  return _mul_nbapi.delete_fabric_host(*args)
delete_fabric_host = _mul_nbapi.delete_fabric_host
# This file is compatible with both classic and new-style classes.


